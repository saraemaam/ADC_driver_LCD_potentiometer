
ADC_driver_LCD_Poteniometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000028b4  00002928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c38  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de8  00000000  00000000  00004578  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000054a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008144  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000092e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009aaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 b3 13 	call	0x2766	; 0x2766 <main>
      7a:	0c 94 58 14 	jmp	0x28b0	; 0x28b0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 08 14 	jmp	0x2810	; 0x2810 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_init>:
/*
 * Description :
 * Function responsible for initialize the ADC driver.
 */
void ADC_init(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX,6);
	 */

	/*ADMUX.Bits.REFS0 = 1;*/
	/*Or make 2 bits of REFS */
	ADMUX.Bits.REFS = 0b01;
     b3e:	e7 e2       	ldi	r30, 0x27	; 39
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	8f 73       	andi	r24, 0x3F	; 63
     b46:	80 64       	ori	r24, 0x40	; 64
     b48:	80 83       	st	Z, r24
#endif

#if ADC_u8RESULT_ADJUST==ADC_u8RIGHT_ADJUST
	/* Select Right adjustment */
	//CLEAR_BIT(ADMUX,5);
	ADMUX.Bits.ADLAR=0;
     b4a:	e7 e2       	ldi	r30, 0x27	; 39
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	80 81       	ld	r24, Z
     b50:	8f 7d       	andi	r24, 0xDF	; 223
     b52:	80 83       	st	Z, r24

#endif

#if ADC_u8AUTO_TRIGGER == ADC_u8TRIGGER_SOURCE_DISABLED
	/* Disable AUTO Trigger */
	ADCSRA.Bits.ADATE=0;
     b54:	e6 e2       	ldi	r30, 0x26	; 38
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	8f 7d       	andi	r24, 0xDF	; 223
     b5c:	80 83       	st	Z, r24
	SET_BIT(SFIOR , 5);  */
	ADCSRA.Bits.ADTS=6;
#endif

	/* Enable ADC module */
	SET_BIT(ADCSRA.Byte,7);
     b5e:	a6 e2       	ldi	r26, 0x26	; 38
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e6 e2       	ldi	r30, 0x26	; 38
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	80 68       	ori	r24, 0x80	; 128
     b6a:	8c 93       	st	X, r24

	/* Disable start conversion it will be enabled in adc_read Fun*/
	CLEAR_BIT(ADCSRA.Byte,6);
     b6c:	a6 e2       	ldi	r26, 0x26	; 38
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e6 e2       	ldi	r30, 0x26	; 38
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8f 7b       	andi	r24, 0xBF	; 191
     b78:	8c 93       	st	X, r24

	/* Clear ADIF Flag */
	SET_BIT(ADCSRA.Byte,4);
     b7a:	a6 e2       	ldi	r26, 0x26	; 38
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e6 e2       	ldi	r30, 0x26	; 38
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	8c 93       	st	X, r24


#if ADC_u8IMPLEMENTATION_BASED == ADC_u8POOLLING_BASED
	/* Disable interrupt*/
	CLEAR_BIT(ADCSRA.Byte,3);
     b88:	a6 e2       	ldi	r26, 0x26	; 38
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e6 e2       	ldi	r30, 0x26	; 38
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	87 7f       	andi	r24, 0xF7	; 247
     b94:	8c 93       	st	X, r24

#if ADC_u8PRESCALLER_VALUE == ADC_u8FCPU_8
	/*CLEAR_BIT(ADCSRA,2);
	SET_BIT(ADCSRA,1);
	SET_BIT(ADCSRA,0);*/
	ADCSRA.Bits.ADPS=3;
     b96:	e6 e2       	ldi	r30, 0x26	; 38
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	88 7f       	andi	r24, 0xF8	; 248
     b9e:	83 60       	ori	r24, 0x03	; 3
     ba0:	80 83       	st	Z, r24
	SET_BIT(ADCSRA,0);*/
	ADCSRA.Bits.ADPS=7;

#endif

}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_readChannel>:
#elif ADC_u8RESULT_ADJUST == ADC_u8LEFT_ADJUST

uint8 ADC_readChannel(uint8 Chnl_Id)

#endif
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	00 d0       	rcall	.+0      	; 0xbae <ADC_readChannel+0x6>
     bae:	0f 92       	push	r0
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	8b 83       	std	Y+3, r24	; 0x03
	/* Input channel number must be from 0 --> 7 */
	Chnl_Id &= 0x07;
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	87 70       	andi	r24, 0x07	; 7
     bba:	8b 83       	std	Y+3, r24	; 0x03

	/* Clear first 5 bits in the ADMUX (channel number  :0 bits) before set the required channel */
	ADMUX.Byte &= 0xE0;
     bbc:	a7 e2       	ldi	r26, 0x27	; 39
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e7 e2       	ldi	r30, 0x27	; 39
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 7e       	andi	r24, 0xE0	; 224
     bc8:	8c 93       	st	X, r24
	/*
	 * ADMUX.Bits.MUX = 0;
	 */
	/* Choose the correct channel by setting the channel number in MUX4:0 bits */
	ADMUX.Byte = ADMUX.Byte | Chnl_Id;
     bca:	a7 e2       	ldi	r26, 0x27	; 39
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e7 e2       	ldi	r30, 0x27	; 39
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	90 81       	ld	r25, Z
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	89 2b       	or	r24, r25
     bd8:	8c 93       	st	X, r24

	/* Start conversion write '1' to ADSC */
	//SET_BIT(ADCSRA,ADSC);
	ADCSRA.Bits.ADSC = 1;
     bda:	e6 e2       	ldi	r30, 0x26	; 38
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	80 64       	ori	r24, 0x40	; 64
     be2:	80 83       	st	Z, r24

	while(ADCSRA.Bits.ADIF == 0); /* Wait for conversion to complete, ADIF becomes '1' */
     be4:	e6 e2       	ldi	r30, 0x26	; 38
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 71       	andi	r24, 0x10	; 16
     bec:	88 23       	and	r24, r24
     bee:	d1 f3       	breq	.-12     	; 0xbe4 <ADC_readChannel+0x3c>

	/* Clear ADIF by write '1' to it */
	ADCSRA.Bits.ADIF = 1;
     bf0:	e6 e2       	ldi	r30, 0x26	; 38
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 61       	ori	r24, 0x10	; 16
     bf8:	80 83       	st	Z, r24

	/* Read the digital value from the data register */

#if ADC_u8RESULT_ADJUST == ADC_u8RIGHT_ADJUST
	uint16 Result=0;
     bfa:	1a 82       	std	Y+2, r1	; 0x02
     bfc:	19 82       	std	Y+1, r1	; 0x01
	Result=ADCL.Byte;
     bfe:	e4 e2       	ldi	r30, 0x24	; 36
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	89 83       	std	Y+1, r24	; 0x01
	Result|=((ADCH.Byte)<<8);
     c0c:	e5 e2       	ldi	r30, 0x25	; 37
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	88 2f       	mov	r24, r24
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	98 2f       	mov	r25, r24
     c18:	88 27       	eor	r24, r24
     c1a:	9c 01       	movw	r18, r24
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	9a 81       	ldd	r25, Y+2	; 0x02
     c20:	82 2b       	or	r24, r18
     c22:	93 2b       	or	r25, r19
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01

#elif ADC_u8RESULT_ADJUST == ADC_u8LEFT_ADJUST
	Result = ADCH.Byte ;
#endif

	return Result;
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02

}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	cf 91       	pop	r28
     c34:	df 91       	pop	r29
     c36:	08 95       	ret

00000c38 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <GPIO_setupPinDirection+0x6>
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <GPIO_setupPinDirection+0x8>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	6a 83       	std	Y+2, r22	; 0x02
     c4a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	88 30       	cpi	r24, 0x08	; 8
     c50:	08 f0       	brcs	.+2      	; 0xc54 <GPIO_setupPinDirection+0x1c>
     c52:	d5 c0       	rjmp	.+426    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	84 30       	cpi	r24, 0x04	; 4
     c58:	08 f0       	brcs	.+2      	; 0xc5c <GPIO_setupPinDirection+0x24>
     c5a:	d1 c0       	rjmp	.+418    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	3d 83       	std	Y+5, r19	; 0x05
     c64:	2c 83       	std	Y+4, r18	; 0x04
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	9d 81       	ldd	r25, Y+5	; 0x05
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	91 05       	cpc	r25, r1
     c6e:	09 f4       	brne	.+2      	; 0xc72 <GPIO_setupPinDirection+0x3a>
     c70:	43 c0       	rjmp	.+134    	; 0xcf8 <GPIO_setupPinDirection+0xc0>
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	2c f4       	brge	.+10     	; 0xc86 <GPIO_setupPinDirection+0x4e>
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	9d 81       	ldd	r25, Y+5	; 0x05
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	71 f0       	breq	.+28     	; 0xca0 <GPIO_setupPinDirection+0x68>
     c84:	bc c0       	rjmp	.+376    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
     c86:	2c 81       	ldd	r18, Y+4	; 0x04
     c88:	3d 81       	ldd	r19, Y+5	; 0x05
     c8a:	22 30       	cpi	r18, 0x02	; 2
     c8c:	31 05       	cpc	r19, r1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <GPIO_setupPinDirection+0x5a>
     c90:	5f c0       	rjmp	.+190    	; 0xd50 <GPIO_setupPinDirection+0x118>
     c92:	8c 81       	ldd	r24, Y+4	; 0x04
     c94:	9d 81       	ldd	r25, Y+5	; 0x05
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <GPIO_setupPinDirection+0x66>
     c9c:	85 c0       	rjmp	.+266    	; 0xda8 <GPIO_setupPinDirection+0x170>
     c9e:	af c0       	rjmp	.+350    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	a1 f4       	brne	.+40     	; 0xcce <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG,pin_num);
     ca6:	aa e3       	ldi	r26, 0x3A	; 58
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ea e3       	ldi	r30, 0x3A	; 58
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_setupPinDirection+0x8c>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_setupPinDirection+0x88>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	98 c0       	rjmp	.+304    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,pin_num);
     cce:	aa e3       	ldi	r26, 0x3A	; 58
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	ea e3       	ldi	r30, 0x3A	; 58
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	48 2f       	mov	r20, r24
     cda:	8a 81       	ldd	r24, Y+2	; 0x02
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	02 2e       	mov	r0, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <GPIO_setupPinDirection+0xb4>
     ce8:	88 0f       	add	r24, r24
     cea:	99 1f       	adc	r25, r25
     cec:	0a 94       	dec	r0
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <GPIO_setupPinDirection+0xb0>
     cf0:	80 95       	com	r24
     cf2:	84 23       	and	r24, r20
     cf4:	8c 93       	st	X, r24
     cf6:	83 c0       	rjmp	.+262    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	a1 f4       	brne	.+40     	; 0xd26 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG,pin_num);
     cfe:	a7 e3       	ldi	r26, 0x37	; 55
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e3       	ldi	r30, 0x37	; 55
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <GPIO_setupPinDirection+0xe4>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <GPIO_setupPinDirection+0xe0>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
     d24:	6c c0       	rjmp	.+216    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,pin_num);
     d26:	a7 e3       	ldi	r26, 0x37	; 55
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	e7 e3       	ldi	r30, 0x37	; 55
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	48 2f       	mov	r20, r24
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	02 2e       	mov	r0, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <GPIO_setupPinDirection+0x10c>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	0a 94       	dec	r0
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <GPIO_setupPinDirection+0x108>
     d48:	80 95       	com	r24
     d4a:	84 23       	and	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	57 c0       	rjmp	.+174    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	81 30       	cpi	r24, 0x01	; 1
     d54:	a1 f4       	brne	.+40     	; 0xd7e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG,pin_num);
     d56:	a4 e3       	ldi	r26, 0x34	; 52
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	e4 e3       	ldi	r30, 0x34	; 52
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	48 2f       	mov	r20, r24
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 2e       	mov	r0, r18
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <GPIO_setupPinDirection+0x13c>
     d70:	88 0f       	add	r24, r24
     d72:	99 1f       	adc	r25, r25
     d74:	0a 94       	dec	r0
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <GPIO_setupPinDirection+0x138>
     d78:	84 2b       	or	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	40 c0       	rjmp	.+128    	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,pin_num);
     d7e:	a4 e3       	ldi	r26, 0x34	; 52
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	e4 e3       	ldi	r30, 0x34	; 52
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	02 2e       	mov	r0, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <GPIO_setupPinDirection+0x164>
     d98:	88 0f       	add	r24, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	0a 94       	dec	r0
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <GPIO_setupPinDirection+0x160>
     da0:	80 95       	com	r24
     da2:	84 23       	and	r24, r20
     da4:	8c 93       	st	X, r24
     da6:	2b c0       	rjmp	.+86     	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	a1 f4       	brne	.+40     	; 0xdd6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG,pin_num);
     dae:	a1 e3       	ldi	r26, 0x31	; 49
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e1 e3       	ldi	r30, 0x31	; 49
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <GPIO_setupPinDirection+0x194>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <GPIO_setupPinDirection+0x190>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	14 c0       	rjmp	.+40     	; 0xdfe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,pin_num);
     dd6:	a1 e3       	ldi	r26, 0x31	; 49
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e1 e3       	ldi	r30, 0x31	; 49
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_setupPinDirection+0x1bc>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_setupPinDirection+0x1b8>
     df8:	80 95       	com	r24
     dfa:	84 23       	and	r24, r20
     dfc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	cf 91       	pop	r28
     e0a:	df 91       	pop	r29
     e0c:	08 95       	ret

00000e0e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     e0e:	df 93       	push	r29
     e10:	cf 93       	push	r28
     e12:	00 d0       	rcall	.+0      	; 0xe14 <GPIO_writePin+0x6>
     e14:	00 d0       	rcall	.+0      	; 0xe16 <GPIO_writePin+0x8>
     e16:	0f 92       	push	r0
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	6a 83       	std	Y+2, r22	; 0x02
     e20:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	88 30       	cpi	r24, 0x08	; 8
     e26:	08 f0       	brcs	.+2      	; 0xe2a <GPIO_writePin+0x1c>
     e28:	d5 c0       	rjmp	.+426    	; 0xfd4 <GPIO_writePin+0x1c6>
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	84 30       	cpi	r24, 0x04	; 4
     e2e:	08 f0       	brcs	.+2      	; 0xe32 <GPIO_writePin+0x24>
     e30:	d1 c0       	rjmp	.+418    	; 0xfd4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3d 83       	std	Y+5, r19	; 0x05
     e3a:	2c 83       	std	Y+4, r18	; 0x04
     e3c:	8c 81       	ldd	r24, Y+4	; 0x04
     e3e:	9d 81       	ldd	r25, Y+5	; 0x05
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <GPIO_writePin+0x3a>
     e46:	43 c0       	rjmp	.+134    	; 0xece <GPIO_writePin+0xc0>
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	3d 81       	ldd	r19, Y+5	; 0x05
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	2c f4       	brge	.+10     	; 0xe5c <GPIO_writePin+0x4e>
     e52:	8c 81       	ldd	r24, Y+4	; 0x04
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	71 f0       	breq	.+28     	; 0xe76 <GPIO_writePin+0x68>
     e5a:	bc c0       	rjmp	.+376    	; 0xfd4 <GPIO_writePin+0x1c6>
     e5c:	2c 81       	ldd	r18, Y+4	; 0x04
     e5e:	3d 81       	ldd	r19, Y+5	; 0x05
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <GPIO_writePin+0x5a>
     e66:	5f c0       	rjmp	.+190    	; 0xf26 <GPIO_writePin+0x118>
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	9d 81       	ldd	r25, Y+5	; 0x05
     e6c:	83 30       	cpi	r24, 0x03	; 3
     e6e:	91 05       	cpc	r25, r1
     e70:	09 f4       	brne	.+2      	; 0xe74 <GPIO_writePin+0x66>
     e72:	85 c0       	rjmp	.+266    	; 0xf7e <GPIO_writePin+0x170>
     e74:	af c0       	rjmp	.+350    	; 0xfd4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	a1 f4       	brne	.+40     	; 0xea4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA_REG,pin_num);
     e7c:	ab e3       	ldi	r26, 0x3B	; 59
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e3       	ldi	r30, 0x3B	; 59
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8a 81       	ldd	r24, Y+2	; 0x02
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 2e       	mov	r0, r18
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <GPIO_writePin+0x8c>
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	0a 94       	dec	r0
     e9c:	e2 f7       	brpl	.-8      	; 0xe96 <GPIO_writePin+0x88>
     e9e:	84 2b       	or	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	98 c0       	rjmp	.+304    	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,pin_num);
     ea4:	ab e3       	ldi	r26, 0x3B	; 59
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	eb e3       	ldi	r30, 0x3B	; 59
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <GPIO_writePin+0xb4>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <GPIO_writePin+0xb0>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	83 c0       	rjmp	.+262    	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	a1 f4       	brne	.+40     	; 0xefc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB_REG,pin_num);
     ed4:	a8 e3       	ldi	r26, 0x38	; 56
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e8 e3       	ldi	r30, 0x38	; 56
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <GPIO_writePin+0xe4>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <GPIO_writePin+0xe0>
     ef6:	84 2b       	or	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	6c c0       	rjmp	.+216    	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,pin_num);
     efc:	a8 e3       	ldi	r26, 0x38	; 56
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e8 e3       	ldi	r30, 0x38	; 56
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <GPIO_writePin+0x10c>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <GPIO_writePin+0x108>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	57 c0       	rjmp	.+174    	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	a1 f4       	brne	.+40     	; 0xf54 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC_REG,pin_num);
     f2c:	a5 e3       	ldi	r26, 0x35	; 53
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e5 e3       	ldi	r30, 0x35	; 53
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <GPIO_writePin+0x13c>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <GPIO_writePin+0x138>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,pin_num);
     f54:	a5 e3       	ldi	r26, 0x35	; 53
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e3       	ldi	r30, 0x35	; 53
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	02 2e       	mov	r0, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_writePin+0x164>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	0a 94       	dec	r0
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_writePin+0x160>
     f76:	80 95       	com	r24
     f78:	84 23       	and	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	2b c0       	rjmp	.+86     	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	81 30       	cpi	r24, 0x01	; 1
     f82:	a1 f4       	brne	.+40     	; 0xfac <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD_REG,pin_num);
     f84:	a2 e3       	ldi	r26, 0x32	; 50
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e2 e3       	ldi	r30, 0x32	; 50
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_writePin+0x194>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_writePin+0x190>
     fa6:	84 2b       	or	r24, r20
     fa8:	8c 93       	st	X, r24
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,pin_num);
     fac:	a2 e3       	ldi	r26, 0x32	; 50
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	e2 e3       	ldi	r30, 0x32	; 50
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	28 2f       	mov	r18, r24
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	02 2e       	mov	r0, r18
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <GPIO_writePin+0x1bc>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	0a 94       	dec	r0
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <GPIO_writePin+0x1b8>
     fce:	80 95       	com	r24
     fd0:	84 23       	and	r24, r20
     fd2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <GPIO_readPin+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <GPIO_readPin+0x8>
     fec:	0f 92       	push	r0
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	8a 83       	std	Y+2, r24	; 0x02
     ff4:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
     ff6:	19 82       	std	Y+1, r1	; 0x01

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	88 30       	cpi	r24, 0x08	; 8
     ffc:	08 f0       	brcs	.+2      	; 0x1000 <GPIO_readPin+0x1c>
     ffe:	84 c0       	rjmp	.+264    	; 0x1108 <GPIO_readPin+0x124>
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	08 f0       	brcs	.+2      	; 0x1008 <GPIO_readPin+0x24>
    1006:	80 c0       	rjmp	.+256    	; 0x1108 <GPIO_readPin+0x124>
		/* Do Nothing  */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3d 83       	std	Y+5, r19	; 0x05
    1010:	2c 83       	std	Y+4, r18	; 0x04
    1012:	4c 81       	ldd	r20, Y+4	; 0x04
    1014:	5d 81       	ldd	r21, Y+5	; 0x05
    1016:	41 30       	cpi	r20, 0x01	; 1
    1018:	51 05       	cpc	r21, r1
    101a:	79 f1       	breq	.+94     	; 0x107a <GPIO_readPin+0x96>
    101c:	8c 81       	ldd	r24, Y+4	; 0x04
    101e:	9d 81       	ldd	r25, Y+5	; 0x05
    1020:	82 30       	cpi	r24, 0x02	; 2
    1022:	91 05       	cpc	r25, r1
    1024:	34 f4       	brge	.+12     	; 0x1032 <GPIO_readPin+0x4e>
    1026:	2c 81       	ldd	r18, Y+4	; 0x04
    1028:	3d 81       	ldd	r19, Y+5	; 0x05
    102a:	21 15       	cp	r18, r1
    102c:	31 05       	cpc	r19, r1
    102e:	69 f0       	breq	.+26     	; 0x104a <GPIO_readPin+0x66>
    1030:	6b c0       	rjmp	.+214    	; 0x1108 <GPIO_readPin+0x124>
    1032:	4c 81       	ldd	r20, Y+4	; 0x04
    1034:	5d 81       	ldd	r21, Y+5	; 0x05
    1036:	42 30       	cpi	r20, 0x02	; 2
    1038:	51 05       	cpc	r21, r1
    103a:	b9 f1       	breq	.+110    	; 0x10aa <GPIO_readPin+0xc6>
    103c:	8c 81       	ldd	r24, Y+4	; 0x04
    103e:	9d 81       	ldd	r25, Y+5	; 0x05
    1040:	83 30       	cpi	r24, 0x03	; 3
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <GPIO_readPin+0x64>
    1046:	49 c0       	rjmp	.+146    	; 0x10da <GPIO_readPin+0xf6>
    1048:	5f c0       	rjmp	.+190    	; 0x1108 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,pin_num))
    104a:	e9 e3       	ldi	r30, 0x39	; 57
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <GPIO_readPin+0x7e>
    105e:	55 95       	asr	r21
    1060:	47 95       	ror	r20
    1062:	8a 95       	dec	r24
    1064:	e2 f7       	brpl	.-8      	; 0x105e <GPIO_readPin+0x7a>
    1066:	ca 01       	movw	r24, r20
    1068:	81 70       	andi	r24, 0x01	; 1
    106a:	90 70       	andi	r25, 0x00	; 0
    106c:	88 23       	and	r24, r24
    106e:	19 f0       	breq	.+6      	; 0x1076 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	49 c0       	rjmp	.+146    	; 0x1108 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1076:	19 82       	std	Y+1, r1	; 0x01
    1078:	47 c0       	rjmp	.+142    	; 0x1108 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,pin_num))
    107a:	e6 e3       	ldi	r30, 0x36	; 54
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	a9 01       	movw	r20, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_readPin+0xae>
    108e:	55 95       	asr	r21
    1090:	47 95       	ror	r20
    1092:	8a 95       	dec	r24
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_readPin+0xaa>
    1096:	ca 01       	movw	r24, r20
    1098:	81 70       	andi	r24, 0x01	; 1
    109a:	90 70       	andi	r25, 0x00	; 0
    109c:	88 23       	and	r24, r24
    109e:	19 f0       	breq	.+6      	; 0x10a6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	31 c0       	rjmp	.+98     	; 0x1108 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10a6:	19 82       	std	Y+1, r1	; 0x01
    10a8:	2f c0       	rjmp	.+94     	; 0x1108 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,pin_num))
    10aa:	e3 e3       	ldi	r30, 0x33	; 51
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	a9 01       	movw	r20, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <GPIO_readPin+0xde>
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	8a 95       	dec	r24
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <GPIO_readPin+0xda>
    10c6:	ca 01       	movw	r24, r20
    10c8:	81 70       	andi	r24, 0x01	; 1
    10ca:	90 70       	andi	r25, 0x00	; 0
    10cc:	88 23       	and	r24, r24
    10ce:	19 f0       	breq	.+6      	; 0x10d6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	19 c0       	rjmp	.+50     	; 0x1108 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10d6:	19 82       	std	Y+1, r1	; 0x01
    10d8:	17 c0       	rjmp	.+46     	; 0x1108 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,pin_num))
    10da:	e0 e3       	ldi	r30, 0x30	; 48
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <GPIO_readPin+0x10e>
    10ee:	55 95       	asr	r21
    10f0:	47 95       	ror	r20
    10f2:	8a 95       	dec	r24
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <GPIO_readPin+0x10a>
    10f6:	ca 01       	movw	r24, r20
    10f8:	81 70       	andi	r24, 0x01	; 1
    10fa:	90 70       	andi	r25, 0x00	; 0
    10fc:	88 23       	and	r24, r24
    10fe:	19 f0       	breq	.+6      	; 0x1106 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1106:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <GPIO_setupPortDirection+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <GPIO_setupPortDirection+0x8>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	84 30       	cpi	r24, 0x04	; 4
    112e:	90 f5       	brcc	.+100    	; 0x1194 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3c 83       	std	Y+4, r19	; 0x04
    1138:	2b 83       	std	Y+3, r18	; 0x03
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	d1 f0       	breq	.+52     	; 0x1178 <GPIO_setupPortDirection+0x5e>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	2c f4       	brge	.+10     	; 0x1158 <GPIO_setupPortDirection+0x3e>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	61 f0       	breq	.+24     	; 0x116e <GPIO_setupPortDirection+0x54>
    1156:	1e c0       	rjmp	.+60     	; 0x1194 <GPIO_setupPortDirection+0x7a>
    1158:	2b 81       	ldd	r18, Y+3	; 0x03
    115a:	3c 81       	ldd	r19, Y+4	; 0x04
    115c:	22 30       	cpi	r18, 0x02	; 2
    115e:	31 05       	cpc	r19, r1
    1160:	81 f0       	breq	.+32     	; 0x1182 <GPIO_setupPortDirection+0x68>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	83 30       	cpi	r24, 0x03	; 3
    1168:	91 05       	cpc	r25, r1
    116a:	81 f0       	breq	.+32     	; 0x118c <GPIO_setupPortDirection+0x72>
    116c:	13 c0       	rjmp	.+38     	; 0x1194 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = direction;
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = direction;
    1178:	e7 e3       	ldi	r30, 0x37	; 55
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
    1180:	09 c0       	rjmp	.+18     	; 0x1194 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = direction;
    1182:	e4 e3       	ldi	r30, 0x34	; 52
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
    118a:	04 c0       	rjmp	.+8      	; 0x1194 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = direction;
    118c:	e1 e3       	ldi	r30, 0x31	; 49
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	80 83       	st	Z, r24
			break;
		}
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <GPIO_writePort+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <GPIO_writePort+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	90 f5       	brcc	.+100    	; 0x121c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	3c 83       	std	Y+4, r19	; 0x04
    11c0:	2b 83       	std	Y+3, r18	; 0x03
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	91 05       	cpc	r25, r1
    11ca:	d1 f0       	breq	.+52     	; 0x1200 <GPIO_writePort+0x5e>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <GPIO_writePort+0x3e>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <GPIO_writePort+0x54>
    11de:	1e c0       	rjmp	.+60     	; 0x121c <GPIO_writePort+0x7a>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	22 30       	cpi	r18, 0x02	; 2
    11e6:	31 05       	cpc	r19, r1
    11e8:	81 f0       	breq	.+32     	; 0x120a <GPIO_writePort+0x68>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <GPIO_writePort+0x72>
    11f4:	13 c0       	rjmp	.+38     	; 0x121c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value ;
    11f6:	eb e3       	ldi	r30, 0x3B	; 59
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	80 83       	st	Z, r24
    11fe:	0e c0       	rjmp	.+28     	; 0x121c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value ;
    1200:	e8 e3       	ldi	r30, 0x38	; 56
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	80 83       	st	Z, r24
    1208:	09 c0       	rjmp	.+18     	; 0x121c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value ;
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	80 83       	st	Z, r24
    1212:	04 c0       	rjmp	.+8      	; 0x121c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value ;
    1214:	e2 e3       	ldi	r30, 0x32	; 50
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
			break;
		}
	}
}
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <GPIO_readPort>:
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */

uint8 GPIO_readPort(uint8 port_num)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	00 d0       	rcall	.+0      	; 0x1230 <GPIO_readPort+0x6>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <GPIO_readPort+0x8>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1238:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if((port_num >= NUM_OF_PORTS))
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	84 30       	cpi	r24, 0x04	; 4
    123e:	90 f5       	brcc	.+100    	; 0x12a4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	3c 83       	std	Y+4, r19	; 0x04
    1248:	2b 83       	std	Y+3, r18	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	91 05       	cpc	r25, r1
    1252:	d1 f0       	breq	.+52     	; 0x1288 <GPIO_readPort+0x5e>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <GPIO_readPort+0x3e>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 f0       	breq	.+24     	; 0x127e <GPIO_readPort+0x54>
    1266:	1e c0       	rjmp	.+60     	; 0x12a4 <GPIO_readPort+0x7a>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	81 f0       	breq	.+32     	; 0x1292 <GPIO_readPort+0x68>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	83 30       	cpi	r24, 0x03	; 3
    1278:	91 05       	cpc	r25, r1
    127a:	81 f0       	breq	.+32     	; 0x129c <GPIO_readPort+0x72>
    127c:	13 c0       	rjmp	.+38     	; 0x12a4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA_REG;
    127e:	e9 e3       	ldi	r30, 0x39	; 57
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	0e c0       	rjmp	.+28     	; 0x12a4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB_REG ;
    1288:	e6 e3       	ldi	r30, 0x36	; 54
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC_REG;
    1292:	e3 e3       	ldi	r30, 0x33	; 51
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	04 c0       	rjmp	.+8      	; 0x12a4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND_REG;
    129c:	e0 e3       	ldi	r30, 0x30	; 48
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <LCD_init>:
 * Initialize LCD :
 * 1.by setting up the direction using GPIO driver
 * 2.set up LCD data bit mode 8bit or 4bit mode
 * */
void LCD_init(void)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	2e 97       	sbiw	r28, 0x0e	; 14
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	41 e0       	ldi	r20, 0x01	; 1
    12d8:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	a0 ea       	ldi	r26, 0xA0	; 160
    12e2:	b1 e4       	ldi	r27, 0x41	; 65
    12e4:	8b 87       	std	Y+11, r24	; 0x0b
    12e6:	9c 87       	std	Y+12, r25	; 0x0c
    12e8:	ad 87       	std	Y+13, r26	; 0x0d
    12ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	4a e7       	ldi	r20, 0x7A	; 122
    12fa:	55 e4       	ldi	r21, 0x45	; 69
    12fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	8f 83       	std	Y+7, r24	; 0x07
    1306:	98 87       	std	Y+8, r25	; 0x08
    1308:	a9 87       	std	Y+9, r26	; 0x09
    130a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130c:	6f 81       	ldd	r22, Y+7	; 0x07
    130e:	78 85       	ldd	r23, Y+8	; 0x08
    1310:	89 85       	ldd	r24, Y+9	; 0x09
    1312:	9a 85       	ldd	r25, Y+10	; 0x0a
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	40 e8       	ldi	r20, 0x80	; 128
    131a:	5f e3       	ldi	r21, 0x3F	; 63
    131c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1320:	88 23       	and	r24, r24
    1322:	2c f4       	brge	.+10     	; 0x132e <LCD_init+0x7a>
		__ticks = 1;
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	3f c0       	rjmp	.+126    	; 0x13ac <LCD_init+0xf8>
	else if (__tmp > 65535)
    132e:	6f 81       	ldd	r22, Y+7	; 0x07
    1330:	78 85       	ldd	r23, Y+8	; 0x08
    1332:	89 85       	ldd	r24, Y+9	; 0x09
    1334:	9a 85       	ldd	r25, Y+10	; 0x0a
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	3f ef       	ldi	r19, 0xFF	; 255
    133a:	4f e7       	ldi	r20, 0x7F	; 127
    133c:	57 e4       	ldi	r21, 0x47	; 71
    133e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1342:	18 16       	cp	r1, r24
    1344:	4c f5       	brge	.+82     	; 0x1398 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1346:	6b 85       	ldd	r22, Y+11	; 0x0b
    1348:	7c 85       	ldd	r23, Y+12	; 0x0c
    134a:	8d 85       	ldd	r24, Y+13	; 0x0d
    134c:	9e 85       	ldd	r25, Y+14	; 0x0e
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e2       	ldi	r20, 0x20	; 32
    1354:	51 e4       	ldi	r21, 0x41	; 65
    1356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9e 83       	std	Y+6, r25	; 0x06
    136c:	8d 83       	std	Y+5, r24	; 0x05
    136e:	0f c0       	rjmp	.+30     	; 0x138e <LCD_init+0xda>
    1370:	80 e9       	ldi	r24, 0x90	; 144
    1372:	91 e0       	ldi	r25, 0x01	; 1
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <LCD_init+0xc8>
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	69 f7       	brne	.-38     	; 0x1370 <LCD_init+0xbc>
    1396:	14 c0       	rjmp	.+40     	; 0x13c0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1398:	6f 81       	ldd	r22, Y+7	; 0x07
    139a:	78 85       	ldd	r23, Y+8	; 0x08
    139c:	89 85       	ldd	r24, Y+9	; 0x09
    139e:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	f1 f7       	brne	.-4      	; 0x13b8 <LCD_init+0x104>
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

#if (LCD_DATA_BITS_MODE == 4)

	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	63 e0       	ldi	r22, 0x03	; 3
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	64 e0       	ldi	r22, 0x04	; 4
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	66 e0       	ldi	r22, 0x06	; 6
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	0e 94 1c 06 	call	0xc38	; 0xc38 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    13e8:	83 e3       	ldi	r24, 0x33	; 51
    13ea:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    13ee:	82 e3       	ldi	r24, 0x32	; 50
    13f0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    13f4:	88 e2       	ldi	r24, 0x28	; 40
    13f6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	/* cursor off */
	LCD_sendCommand(LCD_CURSOR_OFF);
    13fa:	8c e0       	ldi	r24, 0x0C	; 12
    13fc:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>
}
    1406:	2e 96       	adiw	r28, 0x0e	; 14
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <LCD_sendCommand>:

/*
 * Description: send required commands to the LCD
 */
void LCD_sendCommand (uint8 command)
{
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	c3 56       	subi	r28, 0x63	; 99
    1426:	d0 40       	sbci	r29, 0x00	; 0
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	fe 01       	movw	r30, r28
    1434:	ed 59       	subi	r30, 0x9D	; 157
    1436:	ff 4f       	sbci	r31, 0xFF	; 255
    1438:	80 83       	st	Z, r24
	/*Clear RS pin (to write command)*/
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW);
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	61 e0       	ldi	r22, 0x01	; 1
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    1444:	fe 01       	movw	r30, r28
    1446:	e1 5a       	subi	r30, 0xA1	; 161
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 e8       	ldi	r26, 0x80	; 128
    1450:	bf e3       	ldi	r27, 0x3F	; 63
    1452:	80 83       	st	Z, r24
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	a2 83       	std	Z+2, r26	; 0x02
    1458:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	8e 01       	movw	r16, r28
    145c:	05 5a       	subi	r16, 0xA5	; 165
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	fe 01       	movw	r30, r28
    1462:	e1 5a       	subi	r30, 0xA1	; 161
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4a e7       	ldi	r20, 0x7A	; 122
    1474:	55 e4       	ldi	r21, 0x45	; 69
    1476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	f8 01       	movw	r30, r16
    1480:	80 83       	st	Z, r24
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	a2 83       	std	Z+2, r26	; 0x02
    1486:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1488:	fe 01       	movw	r30, r28
    148a:	e5 5a       	subi	r30, 0xA5	; 165
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e8       	ldi	r20, 0x80	; 128
    149c:	5f e3       	ldi	r21, 0x3F	; 63
    149e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14a2:	88 23       	and	r24, r24
    14a4:	44 f4       	brge	.+16     	; 0x14b6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    14a6:	fe 01       	movw	r30, r28
    14a8:	e7 5a       	subi	r30, 0xA7	; 167
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	80 83       	st	Z, r24
    14b4:	64 c0       	rjmp	.+200    	; 0x157e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    14b6:	fe 01       	movw	r30, r28
    14b8:	e5 5a       	subi	r30, 0xA5	; 165
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	3f ef       	ldi	r19, 0xFF	; 255
    14c8:	4f e7       	ldi	r20, 0x7F	; 127
    14ca:	57 e4       	ldi	r21, 0x47	; 71
    14cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    14d0:	18 16       	cp	r1, r24
    14d2:	0c f0       	brlt	.+2      	; 0x14d6 <LCD_sendCommand+0xbe>
    14d4:	43 c0       	rjmp	.+134    	; 0x155c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	fe 01       	movw	r30, r28
    14d8:	e1 5a       	subi	r30, 0xA1	; 161
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	60 81       	ld	r22, Z
    14de:	71 81       	ldd	r23, Z+1	; 0x01
    14e0:	82 81       	ldd	r24, Z+2	; 0x02
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	40 e2       	ldi	r20, 0x20	; 32
    14ea:	51 e4       	ldi	r21, 0x41	; 65
    14ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8e 01       	movw	r16, r28
    14f6:	07 5a       	subi	r16, 0xA7	; 167
    14f8:	1f 4f       	sbci	r17, 0xFF	; 255
    14fa:	bc 01       	movw	r22, r24
    14fc:	cd 01       	movw	r24, r26
    14fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1502:	dc 01       	movw	r26, r24
    1504:	cb 01       	movw	r24, r22
    1506:	f8 01       	movw	r30, r16
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    150c:	1f c0       	rjmp	.+62     	; 0x154c <LCD_sendCommand+0x134>
    150e:	fe 01       	movw	r30, r28
    1510:	e9 5a       	subi	r30, 0xA9	; 169
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 e9       	ldi	r24, 0x90	; 144
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
    151c:	fe 01       	movw	r30, r28
    151e:	e9 5a       	subi	r30, 0xA9	; 169
    1520:	ff 4f       	sbci	r31, 0xFF	; 255
    1522:	80 81       	ld	r24, Z
    1524:	91 81       	ldd	r25, Z+1	; 0x01
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <LCD_sendCommand+0x10e>
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5a       	subi	r30, 0xA9	; 169
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	91 83       	std	Z+1, r25	; 0x01
    1532:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1534:	de 01       	movw	r26, r28
    1536:	a7 5a       	subi	r26, 0xA7	; 167
    1538:	bf 4f       	sbci	r27, 0xFF	; 255
    153a:	fe 01       	movw	r30, r28
    153c:	e7 5a       	subi	r30, 0xA7	; 167
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	80 81       	ld	r24, Z
    1542:	91 81       	ldd	r25, Z+1	; 0x01
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	11 96       	adiw	r26, 0x01	; 1
    1548:	9c 93       	st	X, r25
    154a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154c:	fe 01       	movw	r30, r28
    154e:	e7 5a       	subi	r30, 0xA7	; 167
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	80 81       	ld	r24, Z
    1554:	91 81       	ldd	r25, Z+1	; 0x01
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	d1 f6       	brne	.-76     	; 0x150e <LCD_sendCommand+0xf6>
    155a:	27 c0       	rjmp	.+78     	; 0x15aa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155c:	8e 01       	movw	r16, r28
    155e:	07 5a       	subi	r16, 0xA7	; 167
    1560:	1f 4f       	sbci	r17, 0xFF	; 255
    1562:	fe 01       	movw	r30, r28
    1564:	e5 5a       	subi	r30, 0xA5	; 165
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	60 81       	ld	r22, Z
    156a:	71 81       	ldd	r23, Z+1	; 0x01
    156c:	82 81       	ldd	r24, Z+2	; 0x02
    156e:	93 81       	ldd	r25, Z+3	; 0x03
    1570:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	f8 01       	movw	r30, r16
    157a:	91 83       	std	Z+1, r25	; 0x01
    157c:	80 83       	st	Z, r24
    157e:	de 01       	movw	r26, r28
    1580:	ab 5a       	subi	r26, 0xAB	; 171
    1582:	bf 4f       	sbci	r27, 0xFF	; 255
    1584:	fe 01       	movw	r30, r28
    1586:	e7 5a       	subi	r30, 0xA7	; 167
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	80 81       	ld	r24, Z
    158c:	91 81       	ldd	r25, Z+1	; 0x01
    158e:	8d 93       	st	X+, r24
    1590:	9c 93       	st	X, r25
    1592:	fe 01       	movw	r30, r28
    1594:	eb 5a       	subi	r30, 0xAB	; 171
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_sendCommand+0x184>
    15a0:	fe 01       	movw	r30, r28
    15a2:	eb 5a       	subi	r30, 0xAB	; 171
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	80 83       	st	Z, r24
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	62 e0       	ldi	r22, 0x02	; 2
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    15b4:	fe 01       	movw	r30, r28
    15b6:	ef 5a       	subi	r30, 0xAF	; 175
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e8       	ldi	r26, 0x80	; 128
    15c0:	bf e3       	ldi	r27, 0x3F	; 63
    15c2:	80 83       	st	Z, r24
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	a2 83       	std	Z+2, r26	; 0x02
    15c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	8e 01       	movw	r16, r28
    15cc:	03 5b       	subi	r16, 0xB3	; 179
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	fe 01       	movw	r30, r28
    15d2:	ef 5a       	subi	r30, 0xAF	; 175
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	60 81       	ld	r22, Z
    15d8:	71 81       	ldd	r23, Z+1	; 0x01
    15da:	82 81       	ldd	r24, Z+2	; 0x02
    15dc:	93 81       	ldd	r25, Z+3	; 0x03
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	4a e7       	ldi	r20, 0x7A	; 122
    15e4:	55 e4       	ldi	r21, 0x45	; 69
    15e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ea:	dc 01       	movw	r26, r24
    15ec:	cb 01       	movw	r24, r22
    15ee:	f8 01       	movw	r30, r16
    15f0:	80 83       	st	Z, r24
    15f2:	91 83       	std	Z+1, r25	; 0x01
    15f4:	a2 83       	std	Z+2, r26	; 0x02
    15f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15f8:	fe 01       	movw	r30, r28
    15fa:	e3 5b       	subi	r30, 0xB3	; 179
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	60 81       	ld	r22, Z
    1600:	71 81       	ldd	r23, Z+1	; 0x01
    1602:	82 81       	ldd	r24, Z+2	; 0x02
    1604:	93 81       	ldd	r25, Z+3	; 0x03
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e8       	ldi	r20, 0x80	; 128
    160c:	5f e3       	ldi	r21, 0x3F	; 63
    160e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1612:	88 23       	and	r24, r24
    1614:	44 f4       	brge	.+16     	; 0x1626 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1616:	fe 01       	movw	r30, r28
    1618:	e5 5b       	subi	r30, 0xB5	; 181
    161a:	ff 4f       	sbci	r31, 0xFF	; 255
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	91 83       	std	Z+1, r25	; 0x01
    1622:	80 83       	st	Z, r24
    1624:	64 c0       	rjmp	.+200    	; 0x16ee <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1626:	fe 01       	movw	r30, r28
    1628:	e3 5b       	subi	r30, 0xB3	; 179
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	60 81       	ld	r22, Z
    162e:	71 81       	ldd	r23, Z+1	; 0x01
    1630:	82 81       	ldd	r24, Z+2	; 0x02
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1640:	18 16       	cp	r1, r24
    1642:	0c f0       	brlt	.+2      	; 0x1646 <LCD_sendCommand+0x22e>
    1644:	43 c0       	rjmp	.+134    	; 0x16cc <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	fe 01       	movw	r30, r28
    1648:	ef 5a       	subi	r30, 0xAF	; 175
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	60 81       	ld	r22, Z
    164e:	71 81       	ldd	r23, Z+1	; 0x01
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	51 e4       	ldi	r21, 0x41	; 65
    165c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8e 01       	movw	r16, r28
    1666:	05 5b       	subi	r16, 0xB5	; 181
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	f8 01       	movw	r30, r16
    1678:	91 83       	std	Z+1, r25	; 0x01
    167a:	80 83       	st	Z, r24
    167c:	1f c0       	rjmp	.+62     	; 0x16bc <LCD_sendCommand+0x2a4>
    167e:	fe 01       	movw	r30, r28
    1680:	e7 5b       	subi	r30, 0xB7	; 183
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 e9       	ldi	r24, 0x90	; 144
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	91 83       	std	Z+1, r25	; 0x01
    168a:	80 83       	st	Z, r24
    168c:	fe 01       	movw	r30, r28
    168e:	e7 5b       	subi	r30, 0xB7	; 183
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_sendCommand+0x27e>
    169a:	fe 01       	movw	r30, r28
    169c:	e7 5b       	subi	r30, 0xB7	; 183
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a4:	de 01       	movw	r26, r28
    16a6:	a5 5b       	subi	r26, 0xB5	; 181
    16a8:	bf 4f       	sbci	r27, 0xFF	; 255
    16aa:	fe 01       	movw	r30, r28
    16ac:	e5 5b       	subi	r30, 0xB5	; 181
    16ae:	ff 4f       	sbci	r31, 0xFF	; 255
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	11 96       	adiw	r26, 0x01	; 1
    16b8:	9c 93       	st	X, r25
    16ba:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16bc:	fe 01       	movw	r30, r28
    16be:	e5 5b       	subi	r30, 0xB5	; 181
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	d1 f6       	brne	.-76     	; 0x167e <LCD_sendCommand+0x266>
    16ca:	27 c0       	rjmp	.+78     	; 0x171a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16cc:	8e 01       	movw	r16, r28
    16ce:	05 5b       	subi	r16, 0xB5	; 181
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	fe 01       	movw	r30, r28
    16d4:	e3 5b       	subi	r30, 0xB3	; 179
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	f8 01       	movw	r30, r16
    16ea:	91 83       	std	Z+1, r25	; 0x01
    16ec:	80 83       	st	Z, r24
    16ee:	de 01       	movw	r26, r28
    16f0:	a9 5b       	subi	r26, 0xB9	; 185
    16f2:	bf 4f       	sbci	r27, 0xFF	; 255
    16f4:	fe 01       	movw	r30, r28
    16f6:	e5 5b       	subi	r30, 0xB5	; 181
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	8d 93       	st	X+, r24
    1700:	9c 93       	st	X, r25
    1702:	fe 01       	movw	r30, r28
    1704:	e9 5b       	subi	r30, 0xB9	; 185
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	91 81       	ldd	r25, Z+1	; 0x01
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_sendCommand+0x2f4>
    1710:	fe 01       	movw	r30, r28
    1712:	e9 5b       	subi	r30, 0xB9	; 185
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	91 83       	std	Z+1, r25	; 0x01
    1718:	80 83       	st	Z, r24
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 4)
	/*in 4 Bit mode we have to send the command MSB 4 bits then LSB 4 bits */
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID,GET_BIT(command,4));
    171a:	fe 01       	movw	r30, r28
    171c:	ed 59       	subi	r30, 0x9D	; 157
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	88 2f       	mov	r24, r24
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	80 71       	andi	r24, 0x10	; 16
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	95 95       	asr	r25
    1730:	87 95       	ror	r24
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	95 95       	asr	r25
    1738:	87 95       	ror	r24
    173a:	98 2f       	mov	r25, r24
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	63 e0       	ldi	r22, 0x03	; 3
    1740:	49 2f       	mov	r20, r25
    1742:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1746:	fe 01       	movw	r30, r28
    1748:	ed 59       	subi	r30, 0x9D	; 157
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	88 2f       	mov	r24, r24
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	80 72       	andi	r24, 0x20	; 32
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	95 95       	asr	r25
    1760:	87 95       	ror	r24
    1762:	95 95       	asr	r25
    1764:	87 95       	ror	r24
    1766:	95 95       	asr	r25
    1768:	87 95       	ror	r24
    176a:	98 2f       	mov	r25, r24
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	64 e0       	ldi	r22, 0x04	; 4
    1770:	49 2f       	mov	r20, r25
    1772:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1776:	fe 01       	movw	r30, r28
    1778:	ed 59       	subi	r30, 0x9D	; 157
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	80 74       	andi	r24, 0x40	; 64
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	08 2e       	mov	r0, r24
    1788:	89 2f       	mov	r24, r25
    178a:	00 0c       	add	r0, r0
    178c:	88 1f       	adc	r24, r24
    178e:	99 0b       	sbc	r25, r25
    1790:	00 0c       	add	r0, r0
    1792:	88 1f       	adc	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	98 2f       	mov	r25, r24
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	65 e0       	ldi	r22, 0x05	; 5
    179c:	49 2f       	mov	r20, r25
    179e:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    17a2:	fe 01       	movw	r30, r28
    17a4:	ed 59       	subi	r30, 0x9D	; 157
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	98 2f       	mov	r25, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	99 27       	eor	r25, r25
    17b0:	99 1f       	adc	r25, r25
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	66 e0       	ldi	r22, 0x06	; 6
    17b6:	49 2f       	mov	r20, r25
    17b8:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    17bc:	fe 01       	movw	r30, r28
    17be:	ed 5b       	subi	r30, 0xBD	; 189
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a0 e8       	ldi	r26, 0x80	; 128
    17c8:	bf e3       	ldi	r27, 0x3F	; 63
    17ca:	80 83       	st	Z, r24
    17cc:	91 83       	std	Z+1, r25	; 0x01
    17ce:	a2 83       	std	Z+2, r26	; 0x02
    17d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	8e 01       	movw	r16, r28
    17d4:	01 5c       	subi	r16, 0xC1	; 193
    17d6:	1f 4f       	sbci	r17, 0xFF	; 255
    17d8:	fe 01       	movw	r30, r28
    17da:	ed 5b       	subi	r30, 0xBD	; 189
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	55 e4       	ldi	r21, 0x45	; 69
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	f8 01       	movw	r30, r16
    17f8:	80 83       	st	Z, r24
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	a2 83       	std	Z+2, r26	; 0x02
    17fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1800:	fe 01       	movw	r30, r28
    1802:	ff 96       	adiw	r30, 0x3f	; 63
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <LCD_sendCommand+0x40e>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e af       	std	Y+62, r25	; 0x3e
    1822:	8d af       	std	Y+61, r24	; 0x3d
    1824:	46 c0       	rjmp	.+140    	; 0x18b2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1826:	fe 01       	movw	r30, r28
    1828:	ff 96       	adiw	r30, 0x3f	; 63
    182a:	60 81       	ld	r22, Z
    182c:	71 81       	ldd	r23, Z+1	; 0x01
    182e:	82 81       	ldd	r24, Z+2	; 0x02
    1830:	93 81       	ldd	r25, Z+3	; 0x03
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	64 f5       	brge	.+88     	; 0x189a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	fe 01       	movw	r30, r28
    1844:	ed 5b       	subi	r30, 0xBD	; 189
    1846:	ff 4f       	sbci	r31, 0xFF	; 255
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e af       	std	Y+62, r25	; 0x3e
    186e:	8d af       	std	Y+61, r24	; 0x3d
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <LCD_sendCommand+0x478>
    1872:	80 e9       	ldi	r24, 0x90	; 144
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	9c af       	std	Y+60, r25	; 0x3c
    1878:	8b af       	std	Y+59, r24	; 0x3b
    187a:	8b ad       	ldd	r24, Y+59	; 0x3b
    187c:	9c ad       	ldd	r25, Y+60	; 0x3c
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCD_sendCommand+0x466>
    1882:	9c af       	std	Y+60, r25	; 0x3c
    1884:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8d ad       	ldd	r24, Y+61	; 0x3d
    1888:	9e ad       	ldd	r25, Y+62	; 0x3e
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9e af       	std	Y+62, r25	; 0x3e
    188e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8d ad       	ldd	r24, Y+61	; 0x3d
    1892:	9e ad       	ldd	r25, Y+62	; 0x3e
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <LCD_sendCommand+0x45a>
    1898:	16 c0       	rjmp	.+44     	; 0x18c6 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	fe 01       	movw	r30, r28
    189c:	ff 96       	adiw	r30, 0x3f	; 63
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9e af       	std	Y+62, r25	; 0x3e
    18b0:	8d af       	std	Y+61, r24	; 0x3d
    18b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    18b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    18b6:	9a af       	std	Y+58, r25	; 0x3a
    18b8:	89 af       	std	Y+57, r24	; 0x39
    18ba:	89 ad       	ldd	r24, Y+57	; 0x39
    18bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    18be:	01 97       	sbiw	r24, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <LCD_sendCommand+0x4a6>
    18c2:	9a af       	std	Y+58, r25	; 0x3a
    18c4:	89 af       	std	Y+57, r24	; 0x39

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	62 e0       	ldi	r22, 0x02	; 2
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	8d ab       	std	Y+53, r24	; 0x35
    18da:	9e ab       	std	Y+54, r25	; 0x36
    18dc:	af ab       	std	Y+55, r26	; 0x37
    18de:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6d a9       	ldd	r22, Y+53	; 0x35
    18e2:	7e a9       	ldd	r23, Y+54	; 0x36
    18e4:	8f a9       	ldd	r24, Y+55	; 0x37
    18e6:	98 ad       	ldd	r25, Y+56	; 0x38
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	55 e4       	ldi	r21, 0x45	; 69
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	89 ab       	std	Y+49, r24	; 0x31
    18fa:	9a ab       	std	Y+50, r25	; 0x32
    18fc:	ab ab       	std	Y+51, r26	; 0x33
    18fe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1900:	69 a9       	ldd	r22, Y+49	; 0x31
    1902:	7a a9       	ldd	r23, Y+50	; 0x32
    1904:	8b a9       	ldd	r24, Y+51	; 0x33
    1906:	9c a9       	ldd	r25, Y+52	; 0x34
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	98 ab       	std	Y+48, r25	; 0x30
    191e:	8f a7       	std	Y+47, r24	; 0x2f
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1922:	69 a9       	ldd	r22, Y+49	; 0x31
    1924:	7a a9       	ldd	r23, Y+50	; 0x32
    1926:	8b a9       	ldd	r24, Y+51	; 0x33
    1928:	9c a9       	ldd	r25, Y+52	; 0x34
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6d a9       	ldd	r22, Y+53	; 0x35
    193c:	7e a9       	ldd	r23, Y+54	; 0x36
    193e:	8f a9       	ldd	r24, Y+55	; 0x37
    1940:	98 ad       	ldd	r25, Y+56	; 0x38
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <LCD_sendCommand+0x56a>
    1964:	80 e9       	ldi	r24, 0x90	; 144
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	9e a7       	std	Y+46, r25	; 0x2e
    196a:	8d a7       	std	Y+45, r24	; 0x2d
    196c:	8d a5       	ldd	r24, Y+45	; 0x2d
    196e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <LCD_sendCommand+0x558>
    1974:	9e a7       	std	Y+46, r25	; 0x2e
    1976:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8f a5       	ldd	r24, Y+47	; 0x2f
    197a:	98 a9       	ldd	r25, Y+48	; 0x30
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	98 ab       	std	Y+48, r25	; 0x30
    1980:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8f a5       	ldd	r24, Y+47	; 0x2f
    1984:	98 a9       	ldd	r25, Y+48	; 0x30
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <LCD_sendCommand+0x54c>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	69 a9       	ldd	r22, Y+49	; 0x31
    198e:	7a a9       	ldd	r23, Y+50	; 0x32
    1990:	8b a9       	ldd	r24, Y+51	; 0x33
    1992:	9c a9       	ldd	r25, Y+52	; 0x34
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	98 ab       	std	Y+48, r25	; 0x30
    199e:	8f a7       	std	Y+47, r24	; 0x2f
    19a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19a2:	98 a9       	ldd	r25, Y+48	; 0x30
    19a4:	9c a7       	std	Y+44, r25	; 0x2c
    19a6:	8b a7       	std	Y+43, r24	; 0x2b
    19a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    19aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_sendCommand+0x594>
    19b0:	9c a7       	std	Y+44, r25	; 0x2c
    19b2:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Th = 13ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	62 e0       	ldi	r22, 0x02	; 2
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e8       	ldi	r26, 0x80	; 128
    19c4:	bf e3       	ldi	r27, 0x3F	; 63
    19c6:	8f a3       	std	Y+39, r24	; 0x27
    19c8:	98 a7       	std	Y+40, r25	; 0x28
    19ca:	a9 a7       	std	Y+41, r26	; 0x29
    19cc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ce:	6f a1       	ldd	r22, Y+39	; 0x27
    19d0:	78 a5       	ldd	r23, Y+40	; 0x28
    19d2:	89 a5       	ldd	r24, Y+41	; 0x29
    19d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	4a e7       	ldi	r20, 0x7A	; 122
    19dc:	55 e4       	ldi	r21, 0x45	; 69
    19de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	8b a3       	std	Y+35, r24	; 0x23
    19e8:	9c a3       	std	Y+36, r25	; 0x24
    19ea:	ad a3       	std	Y+37, r26	; 0x25
    19ec:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19ee:	6b a1       	ldd	r22, Y+35	; 0x23
    19f0:	7c a1       	ldd	r23, Y+36	; 0x24
    19f2:	8d a1       	ldd	r24, Y+37	; 0x25
    19f4:	9e a1       	ldd	r25, Y+38	; 0x26
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e8       	ldi	r20, 0x80	; 128
    19fc:	5f e3       	ldi	r21, 0x3F	; 63
    19fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a02:	88 23       	and	r24, r24
    1a04:	2c f4       	brge	.+10     	; 0x1a10 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	9a a3       	std	Y+34, r25	; 0x22
    1a0c:	89 a3       	std	Y+33, r24	; 0x21
    1a0e:	3f c0       	rjmp	.+126    	; 0x1a8e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1a10:	6b a1       	ldd	r22, Y+35	; 0x23
    1a12:	7c a1       	ldd	r23, Y+36	; 0x24
    1a14:	8d a1       	ldd	r24, Y+37	; 0x25
    1a16:	9e a1       	ldd	r25, Y+38	; 0x26
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	3f ef       	ldi	r19, 0xFF	; 255
    1a1c:	4f e7       	ldi	r20, 0x7F	; 127
    1a1e:	57 e4       	ldi	r21, 0x47	; 71
    1a20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a24:	18 16       	cp	r1, r24
    1a26:	4c f5       	brge	.+82     	; 0x1a7a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a28:	6f a1       	ldd	r22, Y+39	; 0x27
    1a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e2       	ldi	r20, 0x20	; 32
    1a36:	51 e4       	ldi	r21, 0x41	; 65
    1a38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9a a3       	std	Y+34, r25	; 0x22
    1a4e:	89 a3       	std	Y+33, r24	; 0x21
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <LCD_sendCommand+0x658>
    1a52:	80 e9       	ldi	r24, 0x90	; 144
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	98 a3       	std	Y+32, r25	; 0x20
    1a58:	8f 8f       	std	Y+31, r24	; 0x1f
    1a5a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a5c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <LCD_sendCommand+0x646>
    1a62:	98 a3       	std	Y+32, r25	; 0x20
    1a64:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a66:	89 a1       	ldd	r24, Y+33	; 0x21
    1a68:	9a a1       	ldd	r25, Y+34	; 0x22
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	9a a3       	std	Y+34, r25	; 0x22
    1a6e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a70:	89 a1       	ldd	r24, Y+33	; 0x21
    1a72:	9a a1       	ldd	r25, Y+34	; 0x22
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	69 f7       	brne	.-38     	; 0x1a52 <LCD_sendCommand+0x63a>
    1a78:	14 c0       	rjmp	.+40     	; 0x1aa2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a7c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a7e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a80:	9e a1       	ldd	r25, Y+38	; 0x26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9a a3       	std	Y+34, r25	; 0x22
    1a8c:	89 a3       	std	Y+33, r24	; 0x21
    1a8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a90:	9a a1       	ldd	r25, Y+34	; 0x22
    1a92:	9e 8f       	std	Y+30, r25	; 0x1e
    1a94:	8d 8f       	std	Y+29, r24	; 0x1d
    1a96:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a98:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a9a:	01 97       	sbiw	r24, 0x01	; 1
    1a9c:	f1 f7       	brne	.-4      	; 0x1a9a <LCD_sendCommand+0x682>
    1a9e:	9e 8f       	std	Y+30, r25	; 0x1e
    1aa0:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);
	/*send the LSB 4 bits command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	ed 59       	subi	r30, 0x9D	; 157
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	98 2f       	mov	r25, r24
    1aac:	91 70       	andi	r25, 0x01	; 1
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	63 e0       	ldi	r22, 0x03	; 3
    1ab2:	49 2f       	mov	r20, r25
    1ab4:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ed 59       	subi	r30, 0x9D	; 157
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	80 81       	ld	r24, Z
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	82 70       	andi	r24, 0x02	; 2
    1ac6:	90 70       	andi	r25, 0x00	; 0
    1ac8:	95 95       	asr	r25
    1aca:	87 95       	ror	r24
    1acc:	98 2f       	mov	r25, r24
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	64 e0       	ldi	r22, 0x04	; 4
    1ad2:	49 2f       	mov	r20, r25
    1ad4:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ad8:	fe 01       	movw	r30, r28
    1ada:	ed 59       	subi	r30, 0x9D	; 157
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	80 81       	ld	r24, Z
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	84 70       	andi	r24, 0x04	; 4
    1ae6:	90 70       	andi	r25, 0x00	; 0
    1ae8:	95 95       	asr	r25
    1aea:	87 95       	ror	r24
    1aec:	95 95       	asr	r25
    1aee:	87 95       	ror	r24
    1af0:	98 2f       	mov	r25, r24
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	65 e0       	ldi	r22, 0x05	; 5
    1af6:	49 2f       	mov	r20, r25
    1af8:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1afc:	fe 01       	movw	r30, r28
    1afe:	ed 59       	subi	r30, 0x9D	; 157
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	88 70       	andi	r24, 0x08	; 8
    1b0a:	90 70       	andi	r25, 0x00	; 0
    1b0c:	95 95       	asr	r25
    1b0e:	87 95       	ror	r24
    1b10:	95 95       	asr	r25
    1b12:	87 95       	ror	r24
    1b14:	95 95       	asr	r25
    1b16:	87 95       	ror	r24
    1b18:	98 2f       	mov	r25, r24
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	66 e0       	ldi	r22, 0x06	; 6
    1b1e:	49 2f       	mov	r20, r25
    1b20:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	a0 e8       	ldi	r26, 0x80	; 128
    1b2a:	bf e3       	ldi	r27, 0x3F	; 63
    1b2c:	89 8f       	std	Y+25, r24	; 0x19
    1b2e:	9a 8f       	std	Y+26, r25	; 0x1a
    1b30:	ab 8f       	std	Y+27, r26	; 0x1b
    1b32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b34:	69 8d       	ldd	r22, Y+25	; 0x19
    1b36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	4a e7       	ldi	r20, 0x7A	; 122
    1b42:	55 e4       	ldi	r21, 0x45	; 69
    1b44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	8d 8b       	std	Y+21, r24	; 0x15
    1b4e:	9e 8b       	std	Y+22, r25	; 0x16
    1b50:	af 8b       	std	Y+23, r26	; 0x17
    1b52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b54:	6d 89       	ldd	r22, Y+21	; 0x15
    1b56:	7e 89       	ldd	r23, Y+22	; 0x16
    1b58:	8f 89       	ldd	r24, Y+23	; 0x17
    1b5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	2c f4       	brge	.+10     	; 0x1b76 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	3f c0       	rjmp	.+126    	; 0x1bf4 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	3f ef       	ldi	r19, 0xFF	; 255
    1b82:	4f e7       	ldi	r20, 0x7F	; 127
    1b84:	57 e4       	ldi	r21, 0x47	; 71
    1b86:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b8a:	18 16       	cp	r1, r24
    1b8c:	4c f5       	brge	.+82     	; 0x1be0 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e2       	ldi	r20, 0x20	; 32
    1b9c:	51 e4       	ldi	r21, 0x41	; 65
    1b9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	bc 01       	movw	r22, r24
    1ba8:	cd 01       	movw	r24, r26
    1baa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bae:	dc 01       	movw	r26, r24
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	9c 8b       	std	Y+20, r25	; 0x14
    1bb4:	8b 8b       	std	Y+19, r24	; 0x13
    1bb6:	0f c0       	rjmp	.+30     	; 0x1bd6 <LCD_sendCommand+0x7be>
    1bb8:	80 e9       	ldi	r24, 0x90	; 144
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	9a 8b       	std	Y+18, r25	; 0x12
    1bbe:	89 8b       	std	Y+17, r24	; 0x11
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	f1 f7       	brne	.-4      	; 0x1bc4 <LCD_sendCommand+0x7ac>
    1bc8:	9a 8b       	std	Y+18, r25	; 0x12
    1bca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bce:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	9c 8b       	std	Y+20, r25	; 0x14
    1bd4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	69 f7       	brne	.-38     	; 0x1bb8 <LCD_sendCommand+0x7a0>
    1bde:	14 c0       	rjmp	.+40     	; 0x1c08 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be0:	6d 89       	ldd	r22, Y+21	; 0x15
    1be2:	7e 89       	ldd	r23, Y+22	; 0x16
    1be4:	8f 89       	ldd	r24, Y+23	; 0x17
    1be6:	98 8d       	ldd	r25, Y+24	; 0x18
    1be8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	9c 8b       	std	Y+20, r25	; 0x14
    1bf2:	8b 8b       	std	Y+19, r24	; 0x13
    1bf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf8:	98 8b       	std	Y+16, r25	; 0x10
    1bfa:	8f 87       	std	Y+15, r24	; 0x0f
    1bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfe:	98 89       	ldd	r25, Y+16	; 0x10
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_sendCommand+0x7e8>
    1c04:	98 8b       	std	Y+16, r25	; 0x10
    1c06:	8f 87       	std	Y+15, r24	; 0x0f

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	62 e0       	ldi	r22, 0x02	; 2
    1c0c:	40 e0       	ldi	r20, 0x00	; 0
    1c0e:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a0 e8       	ldi	r26, 0x80	; 128
    1c18:	bf e3       	ldi	r27, 0x3F	; 63
    1c1a:	8b 87       	std	Y+11, r24	; 0x0b
    1c1c:	9c 87       	std	Y+12, r25	; 0x0c
    1c1e:	ad 87       	std	Y+13, r26	; 0x0d
    1c20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	55 e4       	ldi	r21, 0x45	; 69
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	8f 83       	std	Y+7, r24	; 0x07
    1c3c:	98 87       	std	Y+8, r25	; 0x08
    1c3e:	a9 87       	std	Y+9, r26	; 0x09
    1c40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	40 e8       	ldi	r20, 0x80	; 128
    1c50:	5f e3       	ldi	r21, 0x3F	; 63
    1c52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c56:	88 23       	and	r24, r24
    1c58:	2c f4       	brge	.+10     	; 0x1c64 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	3f c0       	rjmp	.+126    	; 0x1ce2 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1c64:	6f 81       	ldd	r22, Y+7	; 0x07
    1c66:	78 85       	ldd	r23, Y+8	; 0x08
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	3f ef       	ldi	r19, 0xFF	; 255
    1c70:	4f e7       	ldi	r20, 0x7F	; 127
    1c72:	57 e4       	ldi	r21, 0x47	; 71
    1c74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c78:	18 16       	cp	r1, r24
    1c7a:	4c f5       	brge	.+82     	; 0x1cce <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e2       	ldi	r20, 0x20	; 32
    1c8a:	51 e4       	ldi	r21, 0x41	; 65
    1c8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	bc 01       	movw	r22, r24
    1c96:	cd 01       	movw	r24, r26
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9e 83       	std	Y+6, r25	; 0x06
    1ca2:	8d 83       	std	Y+5, r24	; 0x05
    1ca4:	0f c0       	rjmp	.+30     	; 0x1cc4 <LCD_sendCommand+0x8ac>
    1ca6:	80 e9       	ldi	r24, 0x90	; 144
    1ca8:	91 e0       	ldi	r25, 0x01	; 1
    1caa:	9c 83       	std	Y+4, r25	; 0x04
    1cac:	8b 83       	std	Y+3, r24	; 0x03
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <LCD_sendCommand+0x89a>
    1cb6:	9c 83       	std	Y+4, r25	; 0x04
    1cb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cba:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	9e 83       	std	Y+6, r25	; 0x06
    1cc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	69 f7       	brne	.-38     	; 0x1ca6 <LCD_sendCommand+0x88e>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd0:	78 85       	ldd	r23, Y+8	; 0x08
    1cd2:	89 85       	ldd	r24, Y+9	; 0x09
    1cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	f1 f7       	brne	.-4      	; 0x1cee <LCD_sendCommand+0x8d6>
    1cf2:	9a 83       	std	Y+2, r25	; 0x02
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#endif

}
    1cf6:	cd 59       	subi	r28, 0x9D	; 157
    1cf8:	df 4f       	sbci	r29, 0xFF	; 255
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	08 95       	ret

00001d0e <LCD_displayCharacter>:
/*
 * Description:
 * display specific characters to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1d0e:	0f 93       	push	r16
    1d10:	1f 93       	push	r17
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	c3 56       	subi	r28, 0x63	; 99
    1d1c:	d0 40       	sbci	r29, 0x00	; 0
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ed 59       	subi	r30, 0x9D	; 157
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 83       	st	Z, r24
	/*Set RS pin (to write data)*/
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    1d3a:	fe 01       	movw	r30, r28
    1d3c:	e1 5a       	subi	r30, 0xA1	; 161
    1d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a0 e8       	ldi	r26, 0x80	; 128
    1d46:	bf e3       	ldi	r27, 0x3F	; 63
    1d48:	80 83       	st	Z, r24
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d50:	8e 01       	movw	r16, r28
    1d52:	05 5a       	subi	r16, 0xA5	; 165
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e1 5a       	subi	r30, 0xA1	; 161
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	60 81       	ld	r22, Z
    1d5e:	71 81       	ldd	r23, Z+1	; 0x01
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a e7       	ldi	r20, 0x7A	; 122
    1d6a:	55 e4       	ldi	r21, 0x45	; 69
    1d6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	f8 01       	movw	r30, r16
    1d76:	80 83       	st	Z, r24
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	a2 83       	std	Z+2, r26	; 0x02
    1d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d7e:	fe 01       	movw	r30, r28
    1d80:	e5 5a       	subi	r30, 0xA5	; 165
    1d82:	ff 4f       	sbci	r31, 0xFF	; 255
    1d84:	60 81       	ld	r22, Z
    1d86:	71 81       	ldd	r23, Z+1	; 0x01
    1d88:	82 81       	ldd	r24, Z+2	; 0x02
    1d8a:	93 81       	ldd	r25, Z+3	; 0x03
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e8       	ldi	r20, 0x80	; 128
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d98:	88 23       	and	r24, r24
    1d9a:	44 f4       	brge	.+16     	; 0x1dac <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e7 5a       	subi	r30, 0xA7	; 167
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	64 c0       	rjmp	.+200    	; 0x1e74 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1dac:	fe 01       	movw	r30, r28
    1dae:	e5 5a       	subi	r30, 0xA5	; 165
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	4f e7       	ldi	r20, 0x7F	; 127
    1dc0:	57 e4       	ldi	r21, 0x47	; 71
    1dc2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dc6:	18 16       	cp	r1, r24
    1dc8:	0c f0       	brlt	.+2      	; 0x1dcc <LCD_displayCharacter+0xbe>
    1dca:	43 c0       	rjmp	.+134    	; 0x1e52 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e1 5a       	subi	r30, 0xA1	; 161
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	60 81       	ld	r22, Z
    1dd4:	71 81       	ldd	r23, Z+1	; 0x01
    1dd6:	82 81       	ldd	r24, Z+2	; 0x02
    1dd8:	93 81       	ldd	r25, Z+3	; 0x03
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8e 01       	movw	r16, r28
    1dec:	07 5a       	subi	r16, 0xA7	; 167
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	1f c0       	rjmp	.+62     	; 0x1e42 <LCD_displayCharacter+0x134>
    1e04:	fe 01       	movw	r30, r28
    1e06:	e9 5a       	subi	r30, 0xA9	; 169
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 e9       	ldi	r24, 0x90	; 144
    1e0c:	91 e0       	ldi	r25, 0x01	; 1
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	80 83       	st	Z, r24
    1e12:	fe 01       	movw	r30, r28
    1e14:	e9 5a       	subi	r30, 0xA9	; 169
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	91 81       	ldd	r25, Z+1	; 0x01
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <LCD_displayCharacter+0x10e>
    1e20:	fe 01       	movw	r30, r28
    1e22:	e9 5a       	subi	r30, 0xA9	; 169
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2a:	de 01       	movw	r26, r28
    1e2c:	a7 5a       	subi	r26, 0xA7	; 167
    1e2e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e30:	fe 01       	movw	r30, r28
    1e32:	e7 5a       	subi	r30, 0xA7	; 167
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	80 81       	ld	r24, Z
    1e38:	91 81       	ldd	r25, Z+1	; 0x01
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	9c 93       	st	X, r25
    1e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	fe 01       	movw	r30, r28
    1e44:	e7 5a       	subi	r30, 0xA7	; 167
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	91 81       	ldd	r25, Z+1	; 0x01
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	d1 f6       	brne	.-76     	; 0x1e04 <LCD_displayCharacter+0xf6>
    1e50:	27 c0       	rjmp	.+78     	; 0x1ea0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e52:	8e 01       	movw	r16, r28
    1e54:	07 5a       	subi	r16, 0xA7	; 167
    1e56:	1f 4f       	sbci	r17, 0xFF	; 255
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e5 5a       	subi	r30, 0xA5	; 165
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	60 81       	ld	r22, Z
    1e60:	71 81       	ldd	r23, Z+1	; 0x01
    1e62:	82 81       	ldd	r24, Z+2	; 0x02
    1e64:	93 81       	ldd	r25, Z+3	; 0x03
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	f8 01       	movw	r30, r16
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	de 01       	movw	r26, r28
    1e76:	ab 5a       	subi	r26, 0xAB	; 171
    1e78:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 5a       	subi	r30, 0xA7	; 167
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	8d 93       	st	X+, r24
    1e86:	9c 93       	st	X, r25
    1e88:	fe 01       	movw	r30, r28
    1e8a:	eb 5a       	subi	r30, 0xAB	; 171
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <LCD_displayCharacter+0x184>
    1e96:	fe 01       	movw	r30, r28
    1e98:	eb 5a       	subi	r30, 0xAB	; 171
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	91 83       	std	Z+1, r25	; 0x01
    1e9e:	80 83       	st	Z, r24
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ef 5a       	subi	r30, 0xAF	; 175
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	a0 e8       	ldi	r26, 0x80	; 128
    1eb6:	bf e3       	ldi	r27, 0x3F	; 63
    1eb8:	80 83       	st	Z, r24
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	a2 83       	std	Z+2, r26	; 0x02
    1ebe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	8e 01       	movw	r16, r28
    1ec2:	03 5b       	subi	r16, 0xB3	; 179
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ef 5a       	subi	r30, 0xAF	; 175
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	55 e4       	ldi	r21, 0x45	; 69
    1edc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 83       	st	Z, r24
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	a2 83       	std	Z+2, r26	; 0x02
    1eec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e3 5b       	subi	r30, 0xB3	; 179
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	60 81       	ld	r22, Z
    1ef6:	71 81       	ldd	r23, Z+1	; 0x01
    1ef8:	82 81       	ldd	r24, Z+2	; 0x02
    1efa:	93 81       	ldd	r25, Z+3	; 0x03
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	44 f4       	brge	.+16     	; 0x1f1c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e5 5b       	subi	r30, 0xB5	; 181
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	80 83       	st	Z, r24
    1f1a:	64 c0       	rjmp	.+200    	; 0x1fe4 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e3 5b       	subi	r30, 0xB3	; 179
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	3f ef       	ldi	r19, 0xFF	; 255
    1f2e:	4f e7       	ldi	r20, 0x7F	; 127
    1f30:	57 e4       	ldi	r21, 0x47	; 71
    1f32:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f36:	18 16       	cp	r1, r24
    1f38:	0c f0       	brlt	.+2      	; 0x1f3c <LCD_displayCharacter+0x22e>
    1f3a:	43 c0       	rjmp	.+134    	; 0x1fc2 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ef 5a       	subi	r30, 0xAF	; 175
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 e2       	ldi	r20, 0x20	; 32
    1f50:	51 e4       	ldi	r21, 0x41	; 65
    1f52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	8e 01       	movw	r16, r28
    1f5c:	05 5b       	subi	r16, 0xB5	; 181
    1f5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	f8 01       	movw	r30, r16
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	1f c0       	rjmp	.+62     	; 0x1fb2 <LCD_displayCharacter+0x2a4>
    1f74:	fe 01       	movw	r30, r28
    1f76:	e7 5b       	subi	r30, 0xB7	; 183
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 e9       	ldi	r24, 0x90	; 144
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	fe 01       	movw	r30, r28
    1f84:	e7 5b       	subi	r30, 0xB7	; 183
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 81       	ld	r24, Z
    1f8a:	91 81       	ldd	r25, Z+1	; 0x01
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_displayCharacter+0x27e>
    1f90:	fe 01       	movw	r30, r28
    1f92:	e7 5b       	subi	r30, 0xB7	; 183
    1f94:	ff 4f       	sbci	r31, 0xFF	; 255
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	de 01       	movw	r26, r28
    1f9c:	a5 5b       	subi	r26, 0xB5	; 181
    1f9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e5 5b       	subi	r30, 0xB5	; 181
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	80 81       	ld	r24, Z
    1fa8:	91 81       	ldd	r25, Z+1	; 0x01
    1faa:	01 97       	sbiw	r24, 0x01	; 1
    1fac:	11 96       	adiw	r26, 0x01	; 1
    1fae:	9c 93       	st	X, r25
    1fb0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e5 5b       	subi	r30, 0xB5	; 181
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	00 97       	sbiw	r24, 0x00	; 0
    1fbe:	d1 f6       	brne	.-76     	; 0x1f74 <LCD_displayCharacter+0x266>
    1fc0:	27 c0       	rjmp	.+78     	; 0x2010 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc2:	8e 01       	movw	r16, r28
    1fc4:	05 5b       	subi	r16, 0xB5	; 181
    1fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e3 5b       	subi	r30, 0xB3	; 179
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	60 81       	ld	r22, Z
    1fd0:	71 81       	ldd	r23, Z+1	; 0x01
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	de 01       	movw	r26, r28
    1fe6:	a9 5b       	subi	r26, 0xB9	; 185
    1fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e5 5b       	subi	r30, 0xB5	; 181
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	8d 93       	st	X+, r24
    1ff6:	9c 93       	st	X, r25
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e9 5b       	subi	r30, 0xB9	; 185
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <LCD_displayCharacter+0x2f4>
    2006:	fe 01       	movw	r30, r28
    2008:	e9 5b       	subi	r30, 0xB9	; 185
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	80 83       	st	Z, r24
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

#if (LCD_DATA_BITS_MODE == 4)
	/*in 4 Bit mode we have to send the data MSB 4 bits then LSB 4 bits */
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID,GET_BIT(data,4));
    2010:	fe 01       	movw	r30, r28
    2012:	ed 59       	subi	r30, 0x9D	; 157
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	80 71       	andi	r24, 0x10	; 16
    201e:	90 70       	andi	r25, 0x00	; 0
    2020:	95 95       	asr	r25
    2022:	87 95       	ror	r24
    2024:	95 95       	asr	r25
    2026:	87 95       	ror	r24
    2028:	95 95       	asr	r25
    202a:	87 95       	ror	r24
    202c:	95 95       	asr	r25
    202e:	87 95       	ror	r24
    2030:	98 2f       	mov	r25, r24
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	63 e0       	ldi	r22, 0x03	; 3
    2036:	49 2f       	mov	r20, r25
    2038:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT (data,5));
    203c:	fe 01       	movw	r30, r28
    203e:	ed 59       	subi	r30, 0x9D	; 157
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	88 2f       	mov	r24, r24
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	80 72       	andi	r24, 0x20	; 32
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	95 95       	asr	r25
    204e:	87 95       	ror	r24
    2050:	95 95       	asr	r25
    2052:	87 95       	ror	r24
    2054:	95 95       	asr	r25
    2056:	87 95       	ror	r24
    2058:	95 95       	asr	r25
    205a:	87 95       	ror	r24
    205c:	95 95       	asr	r25
    205e:	87 95       	ror	r24
    2060:	98 2f       	mov	r25, r24
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	49 2f       	mov	r20, r25
    2068:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT (data,6));
    206c:	fe 01       	movw	r30, r28
    206e:	ed 59       	subi	r30, 0x9D	; 157
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	80 74       	andi	r24, 0x40	; 64
    207a:	90 70       	andi	r25, 0x00	; 0
    207c:	08 2e       	mov	r0, r24
    207e:	89 2f       	mov	r24, r25
    2080:	00 0c       	add	r0, r0
    2082:	88 1f       	adc	r24, r24
    2084:	99 0b       	sbc	r25, r25
    2086:	00 0c       	add	r0, r0
    2088:	88 1f       	adc	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	98 2f       	mov	r25, r24
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	65 e0       	ldi	r22, 0x05	; 5
    2092:	49 2f       	mov	r20, r25
    2094:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT (data,7));
    2098:	fe 01       	movw	r30, r28
    209a:	ed 59       	subi	r30, 0x9D	; 157
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	98 2f       	mov	r25, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	99 27       	eor	r25, r25
    20a6:	99 1f       	adc	r25, r25
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	66 e0       	ldi	r22, 0x06	; 6
    20ac:	49 2f       	mov	r20, r25
    20ae:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    20b2:	fe 01       	movw	r30, r28
    20b4:	ed 5b       	subi	r30, 0xBD	; 189
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e8       	ldi	r26, 0x80	; 128
    20be:	bf e3       	ldi	r27, 0x3F	; 63
    20c0:	80 83       	st	Z, r24
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	a2 83       	std	Z+2, r26	; 0x02
    20c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c8:	8e 01       	movw	r16, r28
    20ca:	01 5c       	subi	r16, 0xC1	; 193
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	fe 01       	movw	r30, r28
    20d0:	ed 5b       	subi	r30, 0xBD	; 189
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	4a e7       	ldi	r20, 0x7A	; 122
    20e2:	55 e4       	ldi	r21, 0x45	; 69
    20e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 83       	st	Z, r24
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	a2 83       	std	Z+2, r26	; 0x02
    20f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20f6:	fe 01       	movw	r30, r28
    20f8:	ff 96       	adiw	r30, 0x3f	; 63
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9e af       	std	Y+62, r25	; 0x3e
    2118:	8d af       	std	Y+61, r24	; 0x3d
    211a:	46 c0       	rjmp	.+140    	; 0x21a8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    211c:	fe 01       	movw	r30, r28
    211e:	ff 96       	adiw	r30, 0x3f	; 63
    2120:	60 81       	ld	r22, Z
    2122:	71 81       	ldd	r23, Z+1	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	64 f5       	brge	.+88     	; 0x2190 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	fe 01       	movw	r30, r28
    213a:	ed 5b       	subi	r30, 0xBD	; 189
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	60 81       	ld	r22, Z
    2140:	71 81       	ldd	r23, Z+1	; 0x01
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9e af       	std	Y+62, r25	; 0x3e
    2164:	8d af       	std	Y+61, r24	; 0x3d
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_displayCharacter+0x478>
    2168:	80 e9       	ldi	r24, 0x90	; 144
    216a:	91 e0       	ldi	r25, 0x01	; 1
    216c:	9c af       	std	Y+60, r25	; 0x3c
    216e:	8b af       	std	Y+59, r24	; 0x3b
    2170:	8b ad       	ldd	r24, Y+59	; 0x3b
    2172:	9c ad       	ldd	r25, Y+60	; 0x3c
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_displayCharacter+0x466>
    2178:	9c af       	std	Y+60, r25	; 0x3c
    217a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	8d ad       	ldd	r24, Y+61	; 0x3d
    217e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9e af       	std	Y+62, r25	; 0x3e
    2184:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	8d ad       	ldd	r24, Y+61	; 0x3d
    2188:	9e ad       	ldd	r25, Y+62	; 0x3e
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_displayCharacter+0x45a>
    218e:	16 c0       	rjmp	.+44     	; 0x21bc <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	fe 01       	movw	r30, r28
    2192:	ff 96       	adiw	r30, 0x3f	; 63
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9e af       	std	Y+62, r25	; 0x3e
    21a6:	8d af       	std	Y+61, r24	; 0x3d
    21a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    21aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ac:	9a af       	std	Y+58, r25	; 0x3a
    21ae:	89 af       	std	Y+57, r24	; 0x39
    21b0:	89 ad       	ldd	r24, Y+57	; 0x39
    21b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_displayCharacter+0x4a6>
    21b8:	9a af       	std	Y+58, r25	; 0x3a
    21ba:	89 af       	std	Y+57, r24	; 0x39

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	62 e0       	ldi	r22, 0x02	; 2
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	a0 e8       	ldi	r26, 0x80	; 128
    21cc:	bf e3       	ldi	r27, 0x3F	; 63
    21ce:	8d ab       	std	Y+53, r24	; 0x35
    21d0:	9e ab       	std	Y+54, r25	; 0x36
    21d2:	af ab       	std	Y+55, r26	; 0x37
    21d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d6:	6d a9       	ldd	r22, Y+53	; 0x35
    21d8:	7e a9       	ldd	r23, Y+54	; 0x36
    21da:	8f a9       	ldd	r24, Y+55	; 0x37
    21dc:	98 ad       	ldd	r25, Y+56	; 0x38
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	4a e7       	ldi	r20, 0x7A	; 122
    21e4:	55 e4       	ldi	r21, 0x45	; 69
    21e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	89 ab       	std	Y+49, r24	; 0x31
    21f0:	9a ab       	std	Y+50, r25	; 0x32
    21f2:	ab ab       	std	Y+51, r26	; 0x33
    21f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21f6:	69 a9       	ldd	r22, Y+49	; 0x31
    21f8:	7a a9       	ldd	r23, Y+50	; 0x32
    21fa:	8b a9       	ldd	r24, Y+51	; 0x33
    21fc:	9c a9       	ldd	r25, Y+52	; 0x34
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	2c f4       	brge	.+10     	; 0x2218 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    220e:	81 e0       	ldi	r24, 0x01	; 1
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	98 ab       	std	Y+48, r25	; 0x30
    2214:	8f a7       	std	Y+47, r24	; 0x2f
    2216:	3f c0       	rjmp	.+126    	; 0x2296 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2218:	69 a9       	ldd	r22, Y+49	; 0x31
    221a:	7a a9       	ldd	r23, Y+50	; 0x32
    221c:	8b a9       	ldd	r24, Y+51	; 0x33
    221e:	9c a9       	ldd	r25, Y+52	; 0x34
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	3f ef       	ldi	r19, 0xFF	; 255
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	57 e4       	ldi	r21, 0x47	; 71
    2228:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	4c f5       	brge	.+82     	; 0x2282 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	6d a9       	ldd	r22, Y+53	; 0x35
    2232:	7e a9       	ldd	r23, Y+54	; 0x36
    2234:	8f a9       	ldd	r24, Y+55	; 0x37
    2236:	98 ad       	ldd	r25, Y+56	; 0x38
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	40 e2       	ldi	r20, 0x20	; 32
    223e:	51 e4       	ldi	r21, 0x41	; 65
    2240:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	98 ab       	std	Y+48, r25	; 0x30
    2256:	8f a7       	std	Y+47, r24	; 0x2f
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <LCD_displayCharacter+0x56a>
    225a:	80 e9       	ldi	r24, 0x90	; 144
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	9e a7       	std	Y+46, r25	; 0x2e
    2260:	8d a7       	std	Y+45, r24	; 0x2d
    2262:	8d a5       	ldd	r24, Y+45	; 0x2d
    2264:	9e a5       	ldd	r25, Y+46	; 0x2e
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_displayCharacter+0x558>
    226a:	9e a7       	std	Y+46, r25	; 0x2e
    226c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2270:	98 a9       	ldd	r25, Y+48	; 0x30
    2272:	01 97       	sbiw	r24, 0x01	; 1
    2274:	98 ab       	std	Y+48, r25	; 0x30
    2276:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2278:	8f a5       	ldd	r24, Y+47	; 0x2f
    227a:	98 a9       	ldd	r25, Y+48	; 0x30
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	69 f7       	brne	.-38     	; 0x225a <LCD_displayCharacter+0x54c>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2282:	69 a9       	ldd	r22, Y+49	; 0x31
    2284:	7a a9       	ldd	r23, Y+50	; 0x32
    2286:	8b a9       	ldd	r24, Y+51	; 0x33
    2288:	9c a9       	ldd	r25, Y+52	; 0x34
    228a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	98 ab       	std	Y+48, r25	; 0x30
    2294:	8f a7       	std	Y+47, r24	; 0x2f
    2296:	8f a5       	ldd	r24, Y+47	; 0x2f
    2298:	98 a9       	ldd	r25, Y+48	; 0x30
    229a:	9c a7       	std	Y+44, r25	; 0x2c
    229c:	8b a7       	std	Y+43, r24	; 0x2b
    229e:	8b a5       	ldd	r24, Y+43	; 0x2b
    22a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	f1 f7       	brne	.-4      	; 0x22a2 <LCD_displayCharacter+0x594>
    22a6:	9c a7       	std	Y+44, r25	; 0x2c
    22a8:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Th = 13ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH);
    22aa:	80 e0       	ldi	r24, 0x00	; 0
    22ac:	62 e0       	ldi	r22, 0x02	; 2
    22ae:	41 e0       	ldi	r20, 0x01	; 1
    22b0:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	a0 e8       	ldi	r26, 0x80	; 128
    22ba:	bf e3       	ldi	r27, 0x3F	; 63
    22bc:	8f a3       	std	Y+39, r24	; 0x27
    22be:	98 a7       	std	Y+40, r25	; 0x28
    22c0:	a9 a7       	std	Y+41, r26	; 0x29
    22c2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c4:	6f a1       	ldd	r22, Y+39	; 0x27
    22c6:	78 a5       	ldd	r23, Y+40	; 0x28
    22c8:	89 a5       	ldd	r24, Y+41	; 0x29
    22ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	55 e4       	ldi	r21, 0x45	; 69
    22d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	8b a3       	std	Y+35, r24	; 0x23
    22de:	9c a3       	std	Y+36, r25	; 0x24
    22e0:	ad a3       	std	Y+37, r26	; 0x25
    22e2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22e4:	6b a1       	ldd	r22, Y+35	; 0x23
    22e6:	7c a1       	ldd	r23, Y+36	; 0x24
    22e8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ea:	9e a1       	ldd	r25, Y+38	; 0x26
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e8       	ldi	r20, 0x80	; 128
    22f2:	5f e3       	ldi	r21, 0x3F	; 63
    22f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22f8:	88 23       	and	r24, r24
    22fa:	2c f4       	brge	.+10     	; 0x2306 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	9a a3       	std	Y+34, r25	; 0x22
    2302:	89 a3       	std	Y+33, r24	; 0x21
    2304:	3f c0       	rjmp	.+126    	; 0x2384 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2306:	6b a1       	ldd	r22, Y+35	; 0x23
    2308:	7c a1       	ldd	r23, Y+36	; 0x24
    230a:	8d a1       	ldd	r24, Y+37	; 0x25
    230c:	9e a1       	ldd	r25, Y+38	; 0x26
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	4f e7       	ldi	r20, 0x7F	; 127
    2314:	57 e4       	ldi	r21, 0x47	; 71
    2316:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    231a:	18 16       	cp	r1, r24
    231c:	4c f5       	brge	.+82     	; 0x2370 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231e:	6f a1       	ldd	r22, Y+39	; 0x27
    2320:	78 a5       	ldd	r23, Y+40	; 0x28
    2322:	89 a5       	ldd	r24, Y+41	; 0x29
    2324:	9a a5       	ldd	r25, Y+42	; 0x2a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e2       	ldi	r20, 0x20	; 32
    232c:	51 e4       	ldi	r21, 0x41	; 65
    232e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	9a a3       	std	Y+34, r25	; 0x22
    2344:	89 a3       	std	Y+33, r24	; 0x21
    2346:	0f c0       	rjmp	.+30     	; 0x2366 <LCD_displayCharacter+0x658>
    2348:	80 e9       	ldi	r24, 0x90	; 144
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	98 a3       	std	Y+32, r25	; 0x20
    234e:	8f 8f       	std	Y+31, r24	; 0x1f
    2350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2352:	98 a1       	ldd	r25, Y+32	; 0x20
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_displayCharacter+0x646>
    2358:	98 a3       	std	Y+32, r25	; 0x20
    235a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235c:	89 a1       	ldd	r24, Y+33	; 0x21
    235e:	9a a1       	ldd	r25, Y+34	; 0x22
    2360:	01 97       	sbiw	r24, 0x01	; 1
    2362:	9a a3       	std	Y+34, r25	; 0x22
    2364:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	89 a1       	ldd	r24, Y+33	; 0x21
    2368:	9a a1       	ldd	r25, Y+34	; 0x22
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	69 f7       	brne	.-38     	; 0x2348 <LCD_displayCharacter+0x63a>
    236e:	14 c0       	rjmp	.+40     	; 0x2398 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2370:	6b a1       	ldd	r22, Y+35	; 0x23
    2372:	7c a1       	ldd	r23, Y+36	; 0x24
    2374:	8d a1       	ldd	r24, Y+37	; 0x25
    2376:	9e a1       	ldd	r25, Y+38	; 0x26
    2378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9a a3       	std	Y+34, r25	; 0x22
    2382:	89 a3       	std	Y+33, r24	; 0x21
    2384:	89 a1       	ldd	r24, Y+33	; 0x21
    2386:	9a a1       	ldd	r25, Y+34	; 0x22
    2388:	9e 8f       	std	Y+30, r25	; 0x1e
    238a:	8d 8f       	std	Y+29, r24	; 0x1d
    238c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    238e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <LCD_displayCharacter+0x682>
    2394:	9e 8f       	std	Y+30, r25	; 0x1e
    2396:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);
	/*send the LSB 4 bits of data*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2398:	fe 01       	movw	r30, r28
    239a:	ed 59       	subi	r30, 0x9D	; 157
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	98 2f       	mov	r25, r24
    23a2:	91 70       	andi	r25, 0x01	; 1
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	63 e0       	ldi	r22, 0x03	; 3
    23a8:	49 2f       	mov	r20, r25
    23aa:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    23ae:	fe 01       	movw	r30, r28
    23b0:	ed 59       	subi	r30, 0x9D	; 157
    23b2:	ff 4f       	sbci	r31, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	82 70       	andi	r24, 0x02	; 2
    23bc:	90 70       	andi	r25, 0x00	; 0
    23be:	95 95       	asr	r25
    23c0:	87 95       	ror	r24
    23c2:	98 2f       	mov	r25, r24
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	64 e0       	ldi	r22, 0x04	; 4
    23c8:	49 2f       	mov	r20, r25
    23ca:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    23ce:	fe 01       	movw	r30, r28
    23d0:	ed 59       	subi	r30, 0x9D	; 157
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 81       	ld	r24, Z
    23d6:	88 2f       	mov	r24, r24
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	84 70       	andi	r24, 0x04	; 4
    23dc:	90 70       	andi	r25, 0x00	; 0
    23de:	95 95       	asr	r25
    23e0:	87 95       	ror	r24
    23e2:	95 95       	asr	r25
    23e4:	87 95       	ror	r24
    23e6:	98 2f       	mov	r25, r24
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	65 e0       	ldi	r22, 0x05	; 5
    23ec:	49 2f       	mov	r20, r25
    23ee:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    23f2:	fe 01       	movw	r30, r28
    23f4:	ed 59       	subi	r30, 0x9D	; 157
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	80 81       	ld	r24, Z
    23fa:	88 2f       	mov	r24, r24
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	88 70       	andi	r24, 0x08	; 8
    2400:	90 70       	andi	r25, 0x00	; 0
    2402:	95 95       	asr	r25
    2404:	87 95       	ror	r24
    2406:	95 95       	asr	r25
    2408:	87 95       	ror	r24
    240a:	95 95       	asr	r25
    240c:	87 95       	ror	r24
    240e:	98 2f       	mov	r25, r24
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	66 e0       	ldi	r22, 0x06	; 6
    2414:	49 2f       	mov	r20, r25
    2416:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    241a:	80 e0       	ldi	r24, 0x00	; 0
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	a0 e8       	ldi	r26, 0x80	; 128
    2420:	bf e3       	ldi	r27, 0x3F	; 63
    2422:	89 8f       	std	Y+25, r24	; 0x19
    2424:	9a 8f       	std	Y+26, r25	; 0x1a
    2426:	ab 8f       	std	Y+27, r26	; 0x1b
    2428:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    242a:	69 8d       	ldd	r22, Y+25	; 0x19
    242c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    242e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2430:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	4a e7       	ldi	r20, 0x7A	; 122
    2438:	55 e4       	ldi	r21, 0x45	; 69
    243a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	8d 8b       	std	Y+21, r24	; 0x15
    2444:	9e 8b       	std	Y+22, r25	; 0x16
    2446:	af 8b       	std	Y+23, r26	; 0x17
    2448:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e8       	ldi	r20, 0x80	; 128
    2458:	5f e3       	ldi	r21, 0x3F	; 63
    245a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    245e:	88 23       	and	r24, r24
    2460:	2c f4       	brge	.+10     	; 0x246c <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 8b       	std	Y+20, r25	; 0x14
    2468:	8b 8b       	std	Y+19, r24	; 0x13
    246a:	3f c0       	rjmp	.+126    	; 0x24ea <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    246c:	6d 89       	ldd	r22, Y+21	; 0x15
    246e:	7e 89       	ldd	r23, Y+22	; 0x16
    2470:	8f 89       	ldd	r24, Y+23	; 0x17
    2472:	98 8d       	ldd	r25, Y+24	; 0x18
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	3f ef       	ldi	r19, 0xFF	; 255
    2478:	4f e7       	ldi	r20, 0x7F	; 127
    247a:	57 e4       	ldi	r21, 0x47	; 71
    247c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2480:	18 16       	cp	r1, r24
    2482:	4c f5       	brge	.+82     	; 0x24d6 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2484:	69 8d       	ldd	r22, Y+25	; 0x19
    2486:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2488:	8b 8d       	ldd	r24, Y+27	; 0x1b
    248a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e2       	ldi	r20, 0x20	; 32
    2492:	51 e4       	ldi	r21, 0x41	; 65
    2494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	bc 01       	movw	r22, r24
    249e:	cd 01       	movw	r24, r26
    24a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9c 8b       	std	Y+20, r25	; 0x14
    24aa:	8b 8b       	std	Y+19, r24	; 0x13
    24ac:	0f c0       	rjmp	.+30     	; 0x24cc <LCD_displayCharacter+0x7be>
    24ae:	80 e9       	ldi	r24, 0x90	; 144
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	9a 8b       	std	Y+18, r25	; 0x12
    24b4:	89 8b       	std	Y+17, r24	; 0x11
    24b6:	89 89       	ldd	r24, Y+17	; 0x11
    24b8:	9a 89       	ldd	r25, Y+18	; 0x12
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_displayCharacter+0x7ac>
    24be:	9a 8b       	std	Y+18, r25	; 0x12
    24c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c2:	8b 89       	ldd	r24, Y+19	; 0x13
    24c4:	9c 89       	ldd	r25, Y+20	; 0x14
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	00 97       	sbiw	r24, 0x00	; 0
    24d2:	69 f7       	brne	.-38     	; 0x24ae <LCD_displayCharacter+0x7a0>
    24d4:	14 c0       	rjmp	.+40     	; 0x24fe <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	9c 8b       	std	Y+20, r25	; 0x14
    24e8:	8b 8b       	std	Y+19, r24	; 0x13
    24ea:	8b 89       	ldd	r24, Y+19	; 0x13
    24ec:	9c 89       	ldd	r25, Y+20	; 0x14
    24ee:	98 8b       	std	Y+16, r25	; 0x10
    24f0:	8f 87       	std	Y+15, r24	; 0x0f
    24f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f4:	98 89       	ldd	r25, Y+16	; 0x10
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <LCD_displayCharacter+0x7e8>
    24fa:	98 8b       	std	Y+16, r25	; 0x10
    24fc:	8f 87       	std	Y+15, r24	; 0x0f

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* Disable LCD E=0 */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW);
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	62 e0       	ldi	r22, 0x02	; 2
    2502:	40 e0       	ldi	r20, 0x00	; 0
    2504:	0e 94 07 07 	call	0xe0e	; 0xe0e <GPIO_writePin>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	a0 e8       	ldi	r26, 0x80	; 128
    250e:	bf e3       	ldi	r27, 0x3F	; 63
    2510:	8b 87       	std	Y+11, r24	; 0x0b
    2512:	9c 87       	std	Y+12, r25	; 0x0c
    2514:	ad 87       	std	Y+13, r26	; 0x0d
    2516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	6b 85       	ldd	r22, Y+11	; 0x0b
    251a:	7c 85       	ldd	r23, Y+12	; 0x0c
    251c:	8d 85       	ldd	r24, Y+13	; 0x0d
    251e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	30 e0       	ldi	r19, 0x00	; 0
    2524:	4a e7       	ldi	r20, 0x7A	; 122
    2526:	55 e4       	ldi	r21, 0x45	; 69
    2528:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	8f 83       	std	Y+7, r24	; 0x07
    2532:	98 87       	std	Y+8, r25	; 0x08
    2534:	a9 87       	std	Y+9, r26	; 0x09
    2536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2538:	6f 81       	ldd	r22, Y+7	; 0x07
    253a:	78 85       	ldd	r23, Y+8	; 0x08
    253c:	89 85       	ldd	r24, Y+9	; 0x09
    253e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e8       	ldi	r20, 0x80	; 128
    2546:	5f e3       	ldi	r21, 0x3F	; 63
    2548:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    254c:	88 23       	and	r24, r24
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	3f c0       	rjmp	.+126    	; 0x25d8 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	3f ef       	ldi	r19, 0xFF	; 255
    2566:	4f e7       	ldi	r20, 0x7F	; 127
    2568:	57 e4       	ldi	r21, 0x47	; 71
    256a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    256e:	18 16       	cp	r1, r24
    2570:	4c f5       	brge	.+82     	; 0x25c4 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	6b 85       	ldd	r22, Y+11	; 0x0b
    2574:	7c 85       	ldd	r23, Y+12	; 0x0c
    2576:	8d 85       	ldd	r24, Y+13	; 0x0d
    2578:	9e 85       	ldd	r25, Y+14	; 0x0e
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	40 e2       	ldi	r20, 0x20	; 32
    2580:	51 e4       	ldi	r21, 0x41	; 65
    2582:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2586:	dc 01       	movw	r26, r24
    2588:	cb 01       	movw	r24, r22
    258a:	bc 01       	movw	r22, r24
    258c:	cd 01       	movw	r24, r26
    258e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	9e 83       	std	Y+6, r25	; 0x06
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	0f c0       	rjmp	.+30     	; 0x25ba <LCD_displayCharacter+0x8ac>
    259c:	80 e9       	ldi	r24, 0x90	; 144
    259e:	91 e0       	ldi	r25, 0x01	; 1
    25a0:	9c 83       	std	Y+4, r25	; 0x04
    25a2:	8b 83       	std	Y+3, r24	; 0x03
    25a4:	8b 81       	ldd	r24, Y+3	; 0x03
    25a6:	9c 81       	ldd	r25, Y+4	; 0x04
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0x89a>
    25ac:	9c 83       	std	Y+4, r25	; 0x04
    25ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	01 97       	sbiw	r24, 0x01	; 1
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ba:	8d 81       	ldd	r24, Y+5	; 0x05
    25bc:	9e 81       	ldd	r25, Y+6	; 0x06
    25be:	00 97       	sbiw	r24, 0x00	; 0
    25c0:	69 f7       	brne	.-38     	; 0x259c <LCD_displayCharacter+0x88e>
    25c2:	14 c0       	rjmp	.+40     	; 0x25ec <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c4:	6f 81       	ldd	r22, Y+7	; 0x07
    25c6:	78 85       	ldd	r23, Y+8	; 0x08
    25c8:	89 85       	ldd	r24, Y+9	; 0x09
    25ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    25cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <LCD_displayCharacter+0x8d6>
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);

#endif

}
    25ec:	cd 59       	subi	r28, 0x9D	; 157
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	08 95       	ret

00002604 <LCD_displayString>:
 * Description:
 * Display string to the screen
 *
 */
void LCD_displayString(const uint8 *Str)
{
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	00 d0       	rcall	.+0      	; 0x260a <LCD_displayString+0x6>
    260a:	0f 92       	push	r0
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	8a 83       	std	Y+2, r24	; 0x02

	uint8 i = 0;
    2614:	19 82       	std	Y+1, r1	; 0x01
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <LCD_displayString+0x30>

	while (Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	28 2f       	mov	r18, r24
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	9b 81       	ldd	r25, Y+3	; 0x03
    2622:	fc 01       	movw	r30, r24
    2624:	e2 0f       	add	r30, r18
    2626:	f3 1f       	adc	r31, r19
    2628:	80 81       	ld	r24, Z
    262a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_displayCharacter>
		i++;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	89 83       	std	Y+1, r24	; 0x01
void LCD_displayString(const uint8 *Str)
{

	uint8 i = 0;

	while (Str[i] != '\0')
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	8a 81       	ldd	r24, Y+2	; 0x02
    263c:	9b 81       	ldd	r25, Y+3	; 0x03
    263e:	fc 01       	movw	r30, r24
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	39 f7       	brne	.-50     	; 0x2618 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	cf 91       	pop	r28
    2652:	df 91       	pop	r29
    2654:	08 95       	ret

00002656 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2656:	df 93       	push	r29
    2658:	cf 93       	push	r28
    265a:	00 d0       	rcall	.+0      	; 0x265c <LCD_moveCursor+0x6>
    265c:	00 d0       	rcall	.+0      	; 0x265e <LCD_moveCursor+0x8>
    265e:	0f 92       	push	r0
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	6b 83       	std	Y+3, r22	; 0x03

	uint8 Lcd_memory_address;
	switch(row)
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	3d 83       	std	Y+5, r19	; 0x05
    2670:	2c 83       	std	Y+4, r18	; 0x04
    2672:	8c 81       	ldd	r24, Y+4	; 0x04
    2674:	9d 81       	ldd	r25, Y+5	; 0x05
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	91 05       	cpc	r25, r1
    267a:	c1 f0       	breq	.+48     	; 0x26ac <LCD_moveCursor+0x56>
    267c:	2c 81       	ldd	r18, Y+4	; 0x04
    267e:	3d 81       	ldd	r19, Y+5	; 0x05
    2680:	22 30       	cpi	r18, 0x02	; 2
    2682:	31 05       	cpc	r19, r1
    2684:	2c f4       	brge	.+10     	; 0x2690 <LCD_moveCursor+0x3a>
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	9d 81       	ldd	r25, Y+5	; 0x05
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	61 f0       	breq	.+24     	; 0x26a6 <LCD_moveCursor+0x50>
    268e:	19 c0       	rjmp	.+50     	; 0x26c2 <LCD_moveCursor+0x6c>
    2690:	2c 81       	ldd	r18, Y+4	; 0x04
    2692:	3d 81       	ldd	r19, Y+5	; 0x05
    2694:	22 30       	cpi	r18, 0x02	; 2
    2696:	31 05       	cpc	r19, r1
    2698:	69 f0       	breq	.+26     	; 0x26b4 <LCD_moveCursor+0x5e>
    269a:	8c 81       	ldd	r24, Y+4	; 0x04
    269c:	9d 81       	ldd	r25, Y+5	; 0x05
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	61 f0       	breq	.+24     	; 0x26bc <LCD_moveCursor+0x66>
    26a4:	0e c0       	rjmp	.+28     	; 0x26c2 <LCD_moveCursor+0x6c>
	{
	case 0:
		Lcd_memory_address = col;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	89 83       	std	Y+1, r24	; 0x01
    26aa:	0b c0       	rjmp	.+22     	; 0x26c2 <LCD_moveCursor+0x6c>
		break;
	case 1:
		Lcd_memory_address = col + 0x40;
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	80 5c       	subi	r24, 0xC0	; 192
    26b0:	89 83       	std	Y+1, r24	; 0x01
    26b2:	07 c0       	rjmp	.+14     	; 0x26c2 <LCD_moveCursor+0x6c>
		break;
	case 2:
		Lcd_memory_address = col + 0x10;
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	80 5f       	subi	r24, 0xF0	; 240
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	03 c0       	rjmp	.+6      	; 0x26c2 <LCD_moveCursor+0x6c>
		break;
	case 3:
		Lcd_memory_address = col + 0x50;
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	80 5b       	subi	r24, 0xB0	; 176
    26c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand( Lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	80 68       	ori	r24, 0x80	; 128
    26c6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>

}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	00 d0       	rcall	.+0      	; 0x26e0 <LCD_displayStringRowColumn+0x6>
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <LCD_displayStringRowColumn+0x8>
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
    26e6:	89 83       	std	Y+1, r24	; 0x01
    26e8:	6a 83       	std	Y+2, r22	; 0x02
    26ea:	5c 83       	std	Y+4, r21	; 0x04
    26ec:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row,col);
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	6a 81       	ldd	r22, Y+2	; 0x02
    26f2:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_moveCursor>
	LCD_displayString(Str);
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>

}
    26fe:	0f 90       	pop	r0
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	cf 91       	pop	r28
    2708:	df 91       	pop	r29
    270a:	08 95       	ret

0000270c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    270c:	df 93       	push	r29
    270e:	cf 93       	push	r28
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
    2714:	62 97       	sbiw	r28, 0x12	; 18
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	9a 8b       	std	Y+18, r25	; 0x12
    2722:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result */
	char buff[16];
	/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
	itoa(data,buff,10);
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	9e 01       	movw	r18, r28
    272a:	2f 5f       	subi	r18, 0xFF	; 255
    272c:	3f 4f       	sbci	r19, 0xFF	; 255
    272e:	b9 01       	movw	r22, r18
    2730:	4a e0       	ldi	r20, 0x0A	; 10
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	0e 94 13 14 	call	0x2826	; 0x2826 <itoa>
	/* Display the string */
	LCD_displayString(buff);
    2738:	ce 01       	movw	r24, r28
    273a:	01 96       	adiw	r24, 0x01	; 1
    273c:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>

}
    2740:	62 96       	adiw	r28, 0x12	; 18
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	/* Clear screen */
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <LCD_sendCommand>

}
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <main>:
 *****************************************************************/
#include "adc.h"
#include "lcd.h"

int main(void)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <main+0x6>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
	uint16 res_value;
	LCD_init(); /* initialize LCD driver */
    2770:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <LCD_init>
	ADC_init(); /* initialize ADC driver */
    2774:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_init>

	/* Display this string "ADC Value = " only once on LCD at the first row */
	LCD_displayString("ADC Value = ");
    2778:	80 e6       	ldi	r24, 0x60	; 96
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 02 13 	call	0x2604	; 0x2604 <LCD_displayString>
    while(1)
    {
    	/* Read ADC channel 0 where the potentiometer is connected */
		res_value = ADC_readChannel(ADC_u8CH_0);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	0e 94 d4 05 	call	0xba8	; 0xba8 <ADC_readChannel>
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01

		/* Display the ADC digital value every time at same position */
		LCD_moveCursor(0,12);
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	6c e0       	ldi	r22, 0x0C	; 12
    278e:	0e 94 2b 13 	call	0x2656	; 0x2656 <LCD_moveCursor>

		if(res_value >= 1000)
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	23 e0       	ldi	r18, 0x03	; 3
    2798:	88 3e       	cpi	r24, 0xE8	; 232
    279a:	92 07       	cpc	r25, r18
    279c:	28 f0       	brcs	.+10     	; 0x27a8 <main+0x42>
		{
			LCD_intgerToString(res_value);
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_intgerToString>
    27a6:	ec cf       	rjmp	.-40     	; 0x2780 <main+0x1a>
		}
		else
		{
			LCD_intgerToString(res_value);
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	0e 94 86 13 	call	0x270c	; 0x270c <LCD_intgerToString>
			/* In case the digital value is three or two or one digits print space in the next digit place */
			LCD_displayCharacter(' ');
    27b0:	80 e2       	ldi	r24, 0x20	; 32
    27b2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_displayCharacter>
    27b6:	e4 cf       	rjmp	.-56     	; 0x2780 <main+0x1a>

000027b8 <__prologue_saves__>:
    27b8:	2f 92       	push	r2
    27ba:	3f 92       	push	r3
    27bc:	4f 92       	push	r4
    27be:	5f 92       	push	r5
    27c0:	6f 92       	push	r6
    27c2:	7f 92       	push	r7
    27c4:	8f 92       	push	r8
    27c6:	9f 92       	push	r9
    27c8:	af 92       	push	r10
    27ca:	bf 92       	push	r11
    27cc:	cf 92       	push	r12
    27ce:	df 92       	push	r13
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	1f 93       	push	r17
    27d8:	cf 93       	push	r28
    27da:	df 93       	push	r29
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
    27e0:	ca 1b       	sub	r28, r26
    27e2:	db 0b       	sbc	r29, r27
    27e4:	0f b6       	in	r0, 0x3f	; 63
    27e6:	f8 94       	cli
    27e8:	de bf       	out	0x3e, r29	; 62
    27ea:	0f be       	out	0x3f, r0	; 63
    27ec:	cd bf       	out	0x3d, r28	; 61
    27ee:	09 94       	ijmp

000027f0 <__epilogue_restores__>:
    27f0:	2a 88       	ldd	r2, Y+18	; 0x12
    27f2:	39 88       	ldd	r3, Y+17	; 0x11
    27f4:	48 88       	ldd	r4, Y+16	; 0x10
    27f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    27f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    27fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    27fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    27fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2800:	aa 84       	ldd	r10, Y+10	; 0x0a
    2802:	b9 84       	ldd	r11, Y+9	; 0x09
    2804:	c8 84       	ldd	r12, Y+8	; 0x08
    2806:	df 80       	ldd	r13, Y+7	; 0x07
    2808:	ee 80       	ldd	r14, Y+6	; 0x06
    280a:	fd 80       	ldd	r15, Y+5	; 0x05
    280c:	0c 81       	ldd	r16, Y+4	; 0x04
    280e:	1b 81       	ldd	r17, Y+3	; 0x03
    2810:	aa 81       	ldd	r26, Y+2	; 0x02
    2812:	b9 81       	ldd	r27, Y+1	; 0x01
    2814:	ce 0f       	add	r28, r30
    2816:	d1 1d       	adc	r29, r1
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	ed 01       	movw	r28, r26
    2824:	08 95       	ret

00002826 <itoa>:
    2826:	fb 01       	movw	r30, r22
    2828:	9f 01       	movw	r18, r30
    282a:	e8 94       	clt
    282c:	42 30       	cpi	r20, 0x02	; 2
    282e:	c4 f0       	brlt	.+48     	; 0x2860 <itoa+0x3a>
    2830:	45 32       	cpi	r20, 0x25	; 37
    2832:	b4 f4       	brge	.+44     	; 0x2860 <itoa+0x3a>
    2834:	4a 30       	cpi	r20, 0x0A	; 10
    2836:	29 f4       	brne	.+10     	; 0x2842 <itoa+0x1c>
    2838:	97 fb       	bst	r25, 7
    283a:	1e f4       	brtc	.+6      	; 0x2842 <itoa+0x1c>
    283c:	90 95       	com	r25
    283e:	81 95       	neg	r24
    2840:	9f 4f       	sbci	r25, 0xFF	; 255
    2842:	64 2f       	mov	r22, r20
    2844:	77 27       	eor	r23, r23
    2846:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodhi4>
    284a:	80 5d       	subi	r24, 0xD0	; 208
    284c:	8a 33       	cpi	r24, 0x3A	; 58
    284e:	0c f0       	brlt	.+2      	; 0x2852 <itoa+0x2c>
    2850:	89 5d       	subi	r24, 0xD9	; 217
    2852:	81 93       	st	Z+, r24
    2854:	cb 01       	movw	r24, r22
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	a1 f7       	brne	.-24     	; 0x2842 <itoa+0x1c>
    285a:	16 f4       	brtc	.+4      	; 0x2860 <itoa+0x3a>
    285c:	5d e2       	ldi	r21, 0x2D	; 45
    285e:	51 93       	st	Z+, r21
    2860:	10 82       	st	Z, r1
    2862:	c9 01       	movw	r24, r18
    2864:	0c 94 34 14 	jmp	0x2868	; 0x2868 <strrev>

00002868 <strrev>:
    2868:	dc 01       	movw	r26, r24
    286a:	fc 01       	movw	r30, r24
    286c:	67 2f       	mov	r22, r23
    286e:	71 91       	ld	r23, Z+
    2870:	77 23       	and	r23, r23
    2872:	e1 f7       	brne	.-8      	; 0x286c <strrev+0x4>
    2874:	32 97       	sbiw	r30, 0x02	; 2
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <strrev+0x18>
    2878:	7c 91       	ld	r23, X
    287a:	6d 93       	st	X+, r22
    287c:	70 83       	st	Z, r23
    287e:	62 91       	ld	r22, -Z
    2880:	ae 17       	cp	r26, r30
    2882:	bf 07       	cpc	r27, r31
    2884:	c8 f3       	brcs	.-14     	; 0x2878 <strrev+0x10>
    2886:	08 95       	ret

00002888 <__udivmodhi4>:
    2888:	aa 1b       	sub	r26, r26
    288a:	bb 1b       	sub	r27, r27
    288c:	51 e1       	ldi	r21, 0x11	; 17
    288e:	07 c0       	rjmp	.+14     	; 0x289e <__udivmodhi4_ep>

00002890 <__udivmodhi4_loop>:
    2890:	aa 1f       	adc	r26, r26
    2892:	bb 1f       	adc	r27, r27
    2894:	a6 17       	cp	r26, r22
    2896:	b7 07       	cpc	r27, r23
    2898:	10 f0       	brcs	.+4      	; 0x289e <__udivmodhi4_ep>
    289a:	a6 1b       	sub	r26, r22
    289c:	b7 0b       	sbc	r27, r23

0000289e <__udivmodhi4_ep>:
    289e:	88 1f       	adc	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	5a 95       	dec	r21
    28a4:	a9 f7       	brne	.-22     	; 0x2890 <__udivmodhi4_loop>
    28a6:	80 95       	com	r24
    28a8:	90 95       	com	r25
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	08 95       	ret

000028b0 <_exit>:
    28b0:	f8 94       	cli

000028b2 <__stop_program>:
    28b2:	ff cf       	rjmp	.-2      	; 0x28b2 <__stop_program>
